<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="11" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <RemoteCourse>
          <option name="additionalMaterialsUpdateDate" value="1518691981000" />
          <option name="authors">
            <list>
              <StepikUserInfo>
                <option name="firstName" value="JetBrains" />
                <option name="guest" value="false" />
                <option name="id" value="17813950" />
                <option name="lastName" value="" />
              </StepikUserInfo>
            </list>
          </option>
          <option name="compatible" value="true" />
          <option name="courseMode" value="Study" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="This tutorial walks you through a series of exercises to get familiar with Kotlin. &#10;Kotlin Koans are a series of exercises to get you familiar with the Kotlin Syntax.&#10;&#10;Official Kotlin website â€“ https://kotlinlang.org" />
          <option name="fromZip" value="false" />
          <option name="id" value="4222" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="17813950" />
            </list>
          </option>
          <option name="language" value="kotlin" />
          <option name="languageCode" value="en" />
          <option name="loadSolutions" value="true" />
          <option name="name" value="Kotlin Koans" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list>
              <option value="8927" />
              <option value="8928" />
            </list>
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="type" value="pycharm2 kotlin" />
          <option name="updateDate" value="1518691981000" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59492" />
                <option name="index" value="1" />
                <option name="name" value="Introduction" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1518691219000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Simple Functions&lt;/h2&gt;&#10;&lt;p&gt;Take a look at &lt;a href=&quot;http://kotlinlang.org/docs/reference/basic-syntax.html#defining-functions&quot;&gt;function syntax&lt;/a&gt; and make the function &lt;code&gt;start&lt;/code&gt; return the string &lt;code&gt;&amp;quot;OK&amp;quot;&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;In the tasks the function &lt;code&gt;TODO()&lt;/code&gt; is used that throws an exception. Your job during the koans will be to replace this function invocation with a meaningful code according to the problem.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Hello, world!" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234720" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="22" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="22" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="&quot;OK&quot;" />
                                      <option name="selected" value="true" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun start(): String = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestStart {&#10;    @Test fun testOk() {&#10;        Assert.assertEquals(&quot;OK&quot;, start())&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691198000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Java to Kotlin conversion&lt;/h2&gt;&#10;&lt;p&gt;We have a handy tool for Java developers: Java to Kotlin converter. To become familiar with it, please convert the java function &lt;code&gt;toJSON&lt;/code&gt; in the file &lt;code&gt;JavaCode.java&lt;/code&gt;. You can just copy-paste the code to Kotlin file and agree to automatically convert it to Kotlin.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Java to Kotlin conversion" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234721" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/JavaCode.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/JavaCode.java" />
                                <option name="text" value="import java.util.Collection;&#10;import java.util.Iterator;&#10;&#10;public class JavaCode {&#10;    public String toJSON(Collection&lt;Integer&gt; collection) {&#10;        StringBuilder sb = new StringBuilder();&#10;        sb.append(&quot;[&quot;);&#10;        Iterator&lt;Integer&gt; iterator = collection.iterator();&#10;        while (iterator.hasNext()) {&#10;            Integer element = iterator.next();&#10;            sb.append(element);&#10;            if (iterator.hasNext()) {&#10;                sb.append(&quot;, &quot;);&#10;            }&#10;        }&#10;        sb.append(&quot;]&quot;);&#10;        return sb.toString();&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="56" />
                                          <option name="offset" value="0" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="56" />
                                      <option name="offset" value="0" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="fun toJSON(collection: Collection&lt;Int&gt;): String = TODO()" />
                                      <option name="possibleAnswer" value="fun toJSON(collection: Collection&lt;Int&gt;): String {&#10;    val sb = StringBuilder()&#10;    sb.append(&quot;[&quot;)&#10;    val iterator = collection.iterator()&#10;    while (iterator.hasNext())&#10;    {&#10;        val element = iterator.next()&#10;        sb.append(element)&#10;        if (iterator.hasNext())&#10;        {&#10;            sb.append(&quot;, &quot;)&#10;        }&#10;    }&#10;    sb.append(&quot;]&quot;)&#10;    return sb.toString()&#10;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun toJSON(collection: Collection&lt;Int&gt;): String = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;import koans.util.toMessageInEquals&#10;&#10;class TestFunctions() {&#10;    @Test fun collection() {&#10;        Assert.assertEquals(&quot;toJSON&quot;.toMessageInEquals(), &quot;[1, 2, 3, 42, 555]&quot;, toJSON(listOf(1, 2, 3, 42, 555)))&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691200000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Named arguments&lt;/h2&gt;&#10;&lt;p&gt;&lt;a href=&quot;http://kotlinlang.org/docs/reference/functions.html#default-arguments&quot;&gt;Default and named&lt;/a&gt; arguments help to minimize the number of overloads and improve the readability of the function invocation. The library function &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/join-to-string.html&quot;&gt;&lt;code&gt;joinToString&lt;/code&gt;&lt;/a&gt; is declared with default values for parameters:&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;fun joinToString(&#10;    separator: String = &amp;quot;, &amp;quot;,&#10;    prefix: String = &amp;quot;&amp;quot;,&#10;    postfix: String = &amp;quot;&amp;quot;,&#10;    /* ... */&#10;): String&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;It can be called on a collection of Strings. Specifying only two arguments make the function &lt;code&gt;joinOptions()&lt;/code&gt; return the list in a JSON format (e.g., &quot;[a, b, c]&quot;)&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Named arguments" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234722" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="68" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="68" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="prefix = &quot;[&quot;, postfix = &quot;]&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun joinOptions(options: Collection&lt;String&gt;) = options.joinToString(TODO())&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;import koans.util.toMessageInEquals&#10;&#10;class TestNamedArguments() {&#10;&#10;    @Test fun testJoinToString() {&#10;        Assert.assertEquals(&quot;joinOptions&quot;.toMessageInEquals(), &quot;[yes, no, may be]&quot;, joinOptions(listOf(&quot;yes&quot;, &quot;no&quot;, &quot;may be&quot;)))&#10;    }&#10;&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691202000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Default arguments&lt;/h2&gt;&#10;&lt;p&gt;There are several overloads of 'foo()' in Java:&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-java&quot;&gt;public String foo(String name, int number, boolean toUpperCase) {&#10;    return (toUpperCase ? name.toUpperCase() : name) + number;&#10;}&#10;public String foo(String name, int number) {&#10;    return foo(name, number, false);&#10;}&#10;public String foo(String name, boolean toUpperCase) {&#10;    return foo(name, 42, toUpperCase);&#10;}&#10;public String foo(String name) {&#10;    return foo(name, 42);&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;All these Java overloads can be replaced with one function in Kotlin. Change the declaration of the function &lt;code&gt;foo&lt;/code&gt; in a way that makes the code using &lt;code&gt;foo&lt;/code&gt; compile. Use &lt;a href=&quot;http://kotlinlang.org/docs/reference/functions.html#default-arguments&quot;&gt;default and named&lt;/a&gt; arguments.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Default arguments" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234723" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="56" />
                                          <option name="offset" value="0" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="56" />
                                      <option name="offset" value="0" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="fun foo(name: String, number: Int, toUpperCase: Boolean)" />
                                      <option name="possibleAnswer" value="fun foo(name: String, number: Int = 42, toUpperCase: Boolean = false)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun foo(name: String, number: Int, toUpperCase: Boolean) =&#10;        (if (toUpperCase) name.toUpperCase() else name) + number&#10;&#10;fun useFoo() = listOf(&#10;        foo(&quot;a&quot;),&#10;        foo(&quot;b&quot;, number = 1),&#10;        foo(&quot;c&quot;, toUpperCase = true),&#10;        foo(name = &quot;d&quot;, number = 2, toUpperCase = true)&#10;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestDefaultAndNamedParams() {&#10;&#10;    @Test fun testDefaultAndNamedParams() {&#10;        Assert.assertEquals(listOf(&quot;a42&quot;, &quot;b1&quot;, &quot;C42&quot;, &quot;D2&quot;), useFoo())&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691204000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Lambdas&lt;/h2&gt;&#10;&lt;p&gt;Kotlin supports a functional style of programming. Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/lambdas.html&quot;&gt;higher-order functions and function literals (lambdas)&lt;/a&gt; in Kotlin.&lt;/p&gt;&#10;&lt;p&gt;Pass a lambda to &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/any.html&quot;&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt; function to check if the collection contains an even number. The function &lt;code&gt;any&lt;/code&gt; gets a predicate as an argument and returns true if there is at least one element satisfying the predicate.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Lambdas" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234724" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="74" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="74" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="it % 2 == 0" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun containsEven(collection: Collection&lt;Int&gt;): Boolean = collection.any { TODO() }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestLambdas() {&#10;    @Test fun contains() {&#10;        Assert.assertTrue(&quot;The result should be true if the collection contains an even number&quot;, containsEven(listOf(1, 2, 3, 126, 555)))&#10;    }&#10;&#10;    @Test fun notContains() {&#10;        Assert.assertFalse(&quot;The result should be false if the collection doesn't contain an even number&quot;, containsEven(listOf(43, 33)))&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691206000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Strings&lt;/h2&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/basic-types.html#string-literals&quot;&gt;different string literals and string templates&lt;/a&gt; in Kotlin.&lt;/p&gt;&#10;&lt;p&gt;Raw strings are useful for writing regex patterns, you don't need to escape a backslash by a backslash. Below there is a pattern that matches a date in format &lt;code&gt;13.06.1992&lt;/code&gt; (two digits, a dot, two digits, a dot, four digits):&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;fun getPattern() = &amp;quot;&amp;quot;&amp;quot;\d{2}\.\d{2}\.\d{4}&amp;quot;&amp;quot;&amp;quot;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Using &lt;code&gt;month&lt;/code&gt; variable rewrite this pattern in such a way that it matches the date in format &lt;code&gt;13 JUN 1992&lt;/code&gt; (two digits, a whitespace, a month abbreviation, a whitespace, four digits).&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Strings" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234725" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="92" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="92" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="&quot;&quot;&quot;\d{2} ${month} \d{4}&quot;&quot;&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="val month = &quot;(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)&quot;&#10;&#10;fun getPattern(): String = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;import java.util.regex.Pattern&#10;&#10;class TestStringTemplates() {&#10;    private fun testMatch(date: String) = Assert.assertTrue(&quot;The pattern should match $date&quot;, date.matches(getPattern().toRegex()))&#10;    private fun testMismatch(date: String) = Assert.assertFalse(&quot;The pattern shouldn't match $date&quot;, date.matches(getPattern().toRegex()))&#10;&#10;    @Test fun match() {&#10;        testMatch(&quot;11 MAR 1952&quot;)&#10;    }&#10;&#10;    @Test fun match1() {&#10;        testMatch(&quot;24 AUG 1957&quot;)&#10;    }&#10;&#10;    @Test fun doNotMatch() {&#10;        testMismatch(&quot;24 RRR 1957&quot;)&#10;    }}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691207000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Data classes&lt;/h2&gt;&#10;&lt;p&gt;Rewrite the following Java code to Kotlin:&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-java&quot;&gt;public class Person {&#10;    private final String name;&#10;    private final int age;&#10;&#10;    public Person(String name, int age) {&#10;        this.name = name;&#10;        this.age = age;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public int getAge() {&#10;        return age;&#10;    }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Then add an annotation &lt;code&gt;data&lt;/code&gt; to the resulting class. This annotation means the compiler will generate a bunch of useful methods in this class: &lt;code&gt;equals&lt;/code&gt;/&lt;code&gt;hashCode&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt; and some others. The &lt;code&gt;getPeople&lt;/code&gt; function should start to compile.&lt;/p&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/classes.html&quot;&gt;classes&lt;/a&gt;, &lt;a href=&quot;http://kotlinlang.org/docs/reference/properties.html&quot;&gt;properties&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/docs/reference/data-classes.html&quot;&gt;data classes&lt;/a&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Data classes" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234726" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="12" />
                                          <option name="offset" value="0" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="12" />
                                      <option name="offset" value="0" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="class Person" />
                                      <option name="possibleAnswer" value="data class Person(val name: String, val age: Int)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class Person&#10;&#10;fun getPeople(): List&lt;Person&gt; {&#10;    return listOf(Person(&quot;Alice&quot;, 29), Person(&quot;Bob&quot;, 31))&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;&#10;class TestDataClasses {&#10;    @Test fun testListOfPeople() {&#10;        Assert.assertEquals(&quot;[Person(name=Alice, age=29), Person(name=Bob, age=31)]&quot;, getPeople().toString())&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691209000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Nullable types&lt;/h2&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/null-safety.html&quot;&gt;null safety and safe calls&lt;/a&gt; in Kotlin and rewrite the following Java code using only one &lt;code&gt;if&lt;/code&gt; expression:&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-java&quot;&gt;public void sendMessageToClient(&#10;    @Nullable Client client,&#10;    @Nullable String message,&#10;    @NotNull Mailer mailer&#10;) {&#10;    if (client == null || message == null) return;&#10;&#10;    PersonalInfo personalInfo = client.getPersonalInfo();&#10;    if (personalInfo == null) return;&#10;&#10;    String email = personalInfo.getEmail();&#10;    if (email == null) return;&#10;&#10;    mailer.sendMessage(email, message);&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Nullable types" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234727" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="90" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="90" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="val email = client?.personalInfo?.email&#10;    if (email != null &amp;&amp; message != null) {&#10;        mailer.sendMessage(email, message)&#10;    }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun sendMessageToClient(&#10;        client: Client?, message: String?, mailer: Mailer&#10;){&#10;    TODO()&#10;}&#10;&#10;class Client (val personalInfo: PersonalInfo?)&#10;class PersonalInfo (val email: String?)&#10;interface Mailer {&#10;    fun sendMessage(email: String, message: String)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestNullableTypes {&#10;    fun testSendMessageToClient(&#10;            client: Client?,&#10;            message: String?,&#10;            expectedEmail: String? = null,&#10;            shouldBeInvoked: Boolean = false&#10;    ) {&#10;        var invoked = false&#10;        val expectedMessage = message&#10;        sendMessageToClient(client, message, object : Mailer {&#10;            override fun sendMessage(email: String, message: String) {&#10;                invoked = true&#10;                Assert.assertEquals(&quot;The message is not as expected:&quot;,&#10;                        expectedMessage, message)&#10;                Assert.assertEquals(&quot;The email is not as expected:&quot;,&#10;                        expectedEmail, email)&#10;            }&#10;        })&#10;        Assert.assertEquals(&quot;The function 'sendMessage' should${if (shouldBeInvoked) &quot;&quot; else &quot;n't&quot;} be invoked&quot;,&#10;                shouldBeInvoked, invoked)&#10;    }&#10;&#10;    @Test fun everythingIsOk() {&#10;        testSendMessageToClient(Client(PersonalInfo(&quot;bob@gmail.com&quot;)),&#10;                &quot;Hi Bob! We have an awesome proposition for you...&quot;,&#10;                &quot;bob@gmail.com&quot;,&#10;                true)&#10;    }&#10;&#10;    @Test fun noMessage() {&#10;        testSendMessageToClient(Client(PersonalInfo(&quot;bob@gmail.com&quot;)), null)&#10;    }&#10;&#10;    @Test fun noEmail() {&#10;        testSendMessageToClient(Client(PersonalInfo(null)), &quot;Hi Bob! We have an awesome proposition for you...&quot;)&#10;    }&#10;&#10;    @Test fun noPersonalInfo() {&#10;        testSendMessageToClient(Client(null), &quot;Hi Bob! We have an awesome proposition for you...&quot;)&#10;    }&#10;&#10;    @Test fun noClient() {&#10;        testSendMessageToClient(null, &quot;Hi Bob! We have an awesome proposition for you...&quot;)&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691211000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Smart casts&lt;/h2&gt;&#10;&lt;p&gt;Rewrite the following Java code using &lt;a href=&quot;http://kotlinlang.org/docs/reference/typecasts.html#smart-casts&quot;&gt;smart casts&lt;/a&gt; and &lt;a href=&quot;http://kotlinlang.org/docs/reference/control-flow.html#when-expression&quot;&gt;when&lt;/a&gt; expression:&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-java&quot;&gt;public int eval(Expr expr) {&#10;    if (expr instanceof Num) {&#10;        return ((Num) expr).getValue();&#10;    }&#10;    if (expr instanceof Sum) {&#10;        Sum sum = (Sum) expr;&#10;        return eval(sum.getLeft()) + eval(sum.getRight());&#10;    }&#10;    throw new IllegalArgumentException(&amp;quot;Unknown expression&amp;quot;);&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="name" value="Smart casts" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234728" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="72" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="72" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="expr.value" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="101" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="101" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="eval(expr.left) + eval(expr.right)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun eval(expr: Expr): Int =&#10;        when (expr) {&#10;            is Num -&gt; TODO()&#10;            is Sum -&gt; TODO()&#10;            else -&gt; throw IllegalArgumentException(&quot;Unknown expression&quot;)&#10;        }&#10;&#10;interface Expr&#10;class Num(val value: Int) : Expr&#10;class Sum(val left: Expr, val right: Expr) : Expr&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestSmartCasts {&#10;    @Test fun testNum() {&#10;        Assert.assertEquals(&quot;'eval' on Num should work:&quot;, 2, eval(Num(2)))&#10;    }&#10;&#10;    @Test fun testSum() {&#10;        Assert.assertEquals(&quot;'eval' on Sum should work:&quot;, 3, eval(Sum(Num(2), Num(1))))&#10;    }&#10;&#10;    @Test fun testRecursion() {&#10;        Assert.assertEquals(&quot;'eval' should work:&quot;, 6, eval(Sum(Sum(Num(1), Num(2)), Num(3))))&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691213000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Extension functions&lt;/h2&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/extensions.html&quot;&gt;extension functions&lt;/a&gt;. Then implement extension functions &lt;code&gt;Int.r()&lt;/code&gt; and &lt;code&gt;Pair.r()&lt;/code&gt; and make them convert Int and Pair to &lt;code&gt;RationalNumber&lt;/code&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="10" />
                      <option name="name" value="Extension functions" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234729" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="30" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="30" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="RationalNumber(this, 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="78" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="78" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="RationalNumber(first, second)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun Int.r(): RationalNumber = TODO()&#10;fun Pair&lt;Int, Int&gt;.r(): RationalNumber = TODO()&#10;&#10;data class RationalNumber(val numerator: Int, val denominator: Int)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestExtensionFunctions() {&#10;    @Test fun testIntExtension() {&#10;        Assert.assertEquals(&quot;Rational number creation error: &quot;, RationalNumber(4, 1), 4.r())&#10;    }&#10;&#10;    @Test fun testPairExtension() {&#10;        Assert.assertEquals(&quot;Rational number creation error: &quot;, RationalNumber(2, 3), Pair(2, 3).r())&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691215000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Object expressions&lt;/h2&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/object-declarations.html&quot;&gt;object expressions&lt;/a&gt; that play the same role in Kotlin as anonymous classes in Java.&lt;/p&gt;&#10;&lt;p&gt;Add an object expression that provides a comparator to sort a list in a descending order using java.util.Collections class. In Kotlin you use Kotlin library extensions instead of java.util.Collections, but this example is still a good demonstration of mixing Kotlin and Java code.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="11" />
                      <option name="name" value="Object expressions" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234730" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="9" />
                                          <option name="offset" value="120" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="120" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="object {}" />
                                      <option name="possibleAnswer" value="object : Comparator&lt;Int&gt; {&#10;    override fun compare(x: Int, y: Int) = y - x&#10;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import java.util.*&#10;&#10;fun getList(): List&lt;Int&gt; {&#10;    val arrayList = arrayListOf(1, 5, 2)&#10;    Collections.sort(arrayList, object {})&#10;    return arrayList&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;import koans.util.toMessageInEquals&#10;&#10;class TestObjectExpressions {&#10;    @Test fun testSort() {&#10;        Assert.assertEquals(&quot;getList&quot;.toMessageInEquals(), listOf(5, 2, 1), getList())&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691216000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;SAM conversions&lt;/h2&gt;&#10;&lt;p&gt;When an object implements a SAM interface (one with a Single Abstract Method), you can pass a lambda instead. Read more about &lt;a href=&quot;https://kotlinlang.org/docs/reference/java-interop.html#sam-conversions&quot;&gt;SAM-conversions&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;In the previous example change an object expression to a lambda.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="12" />
                      <option name="name" value="SAM conversions" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234731" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="130" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="130" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="y - x" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import java.util.*&#10;&#10;fun getList(): List&lt;Int&gt; {&#10;    val arrayList = arrayListOf(1, 5, 2)&#10;    Collections.sort(arrayList, { x, y -&gt; TODO() })&#10;    return arrayList&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;import koans.util.toMessageInEquals&#10;&#10;class TestSamConversions {&#10;    @Test fun testSort() {&#10;        Assert.assertEquals(&quot;getList&quot;.toMessageInEquals(), listOf(5, 2, 1), getList())&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691218000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Extension functions on collections&lt;/h2&gt;&#10;&lt;p&gt;Kotlin code can be easily mixed with Java code. Thus in Kotlin we don't introduce our own collections, but use standard Java ones (slightly improved). Read about &lt;a href=&quot;http://blog.jetbrains.com/kotlin/2012/09/kotlin-m3-is-out/#Collections&quot;&gt;read-only and mutable views on Java collections&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;In &lt;a href=&quot;http://kotlinlang.org/api/latest/jvm/stdlib/kotlin/&quot;&gt;Kotlin standard library&lt;/a&gt; there are lots of extension functions that make the work with collections more convenient. Rewrite the previous example once more using an extension function &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/sorted-descending.html&quot;&gt;&lt;code&gt;sortedDescending&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="13" />
                      <option name="name" value="Extensions on collections" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234732" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="52" />
                                          <option name="offset" value="58" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="52" />
                                      <option name="offset" value="58" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="//TODO(&quot;return the list sorted in descending order&quot;)" />
                                      <option name="possibleAnswer" value=".sortedDescending()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun getList(): List&lt;Int&gt; {&#10;    return arrayListOf(1, 5, 2)//TODO(&quot;return the list sorted in descending order&quot;)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestExtensionsOnCollections {&#10;    @Test fun testSort() {&#10;        Assert.assertEquals(listOf(5, 2, 1), getList())&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691219000" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="36977" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59493" />
                <option name="index" value="2" />
                <option name="name" value="Conventions" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1518691228000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Comparison&lt;/h2&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/operator-overloading.html&quot;&gt;operator overloading&lt;/a&gt; to learn how different conventions for operations like &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; work in Kotlin. Add the function &lt;code&gt;compareTo&lt;/code&gt; to the class MyDate to make it comparable. After that the code below &lt;code&gt;date1 &amp;lt; date2&lt;/code&gt; will start to compile.&lt;/p&gt;&#10;&lt;p&gt;In Kotlin when you override a member, the modifier &lt;a href=&quot;http://kotlinlang.org/docs/reference/classes.html#overriding-members&quot;&gt;&lt;code&gt;override&lt;/code&gt;&lt;/a&gt; is mandatory.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Comparison" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234733" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="97" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="97" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="override fun compareTo(other: MyDate) = when {&#10;        year != other.year -&gt; year - other.year&#10;        month != other.month -&gt; month - other.month&#10;        else -&gt; dayOfMonth - other.dayOfMonth&#10;    }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable&lt;MyDate&gt; {&#10;    /* TODO */&#10;}&#10;&#10;fun compare(date1: MyDate, date2: MyDate) = date1 &lt; date2&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestComparison {&#10;&#10;    @Test fun testBefore() {&#10;        val first = MyDate(2014, 5, 10)&#10;        val second = MyDate(2014, 7, 11)&#10;        Assert.assertTrue(&quot;compareTo&quot;.toMessage() + &quot;: ${first} should go before ${second}&quot;, first &lt; second)&#10;    }&#10;&#10;    @Test fun testAfter() {&#10;        val first = MyDate(2014, 10, 20)&#10;        val second = MyDate(2014, 7, 11)&#10;        Assert.assertTrue(&quot;compareTo&quot;.toMessage() + &quot;: ${first} should go after ${second}&quot;, first &gt; second)&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691221000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;In range&lt;/h2&gt;&#10;&lt;p&gt;In Kotlin &lt;code&gt;in&lt;/code&gt; checks are translated to the corresponding &lt;code&gt;contains&lt;/code&gt; calls:&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;val list = listOf(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;)&#10;&amp;quot;a&amp;quot; in list  // list.contains(&amp;quot;a&amp;quot;)&#10;&amp;quot;a&amp;quot; !in list // !list.contains(&amp;quot;a&amp;quot;)&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/ranges.html&quot;&gt;ranges&lt;/a&gt;. Add a method &lt;code&gt;fun contains(d: MyDate)&lt;/code&gt; to the class &lt;code&gt;DateRange&lt;/code&gt; to allow &lt;code&gt;in&lt;/code&gt; checks with a range of dates.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="In range" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234734" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/MyDate.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/MyDate.kt" />
                                <option name="text" value="data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable&lt;MyDate&gt;{&#10;    override fun compareTo(other: MyDate): Int{&#10;        if(year != other.year) return year - other.year&#10;        if(month != other.month) return month - other.month&#10;        return dayOfMonth - other.dayOfMonth&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="60" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="60" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value=" {&#10;    operator fun contains(item: MyDate): Boolean = start &lt;= item &amp;&amp; item &lt;= endInclusive&#10;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class DateRange(val start: MyDate, val endInclusive: MyDate)/* TODO */&#10;&#10;fun checkInRange(date: MyDate, first: MyDate, last: MyDate): Boolean {&#10;    return date in DateRange(first, last)&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.inEquals&#10;&#10;class TestInRange {&#10;    fun doTest(date: MyDate, first: MyDate, last: MyDate, shouldBeInRange: Boolean) {&#10;        val message = &quot;${date} should${if (shouldBeInRange) &quot;&quot; else &quot;n't&quot;} be in ${DateRange(first, last)}&quot;.inEquals()&#10;        Assert.assertEquals(message, shouldBeInRange, checkInRange(date, first, last))&#10;    }&#10;&#10;    @Test fun testInRange() {&#10;        doTest(MyDate(2014, 3, 22), MyDate(2014, 1, 1), MyDate(2015, 1, 1), shouldBeInRange = true)&#10;    }&#10;&#10;    @Test fun testBefore() {&#10;        doTest(MyDate(2013, 3, 22), MyDate(2014, 1, 1), MyDate(2015, 1, 1), shouldBeInRange = false)&#10;    }&#10;&#10;    @Test fun testAfter() {&#10;        doTest(MyDate(2015, 3, 22), MyDate(2014, 1, 1), MyDate(2015, 1, 1), shouldBeInRange = false)&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691222000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Range to&lt;/h2&gt;&#10;&lt;p&gt;Implement the function &lt;code&gt;MyDate.rangeTo()&lt;/code&gt;. This allows you to create a range of dates using the following syntax:&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;MyDate(2015, 5, 11)..MyDate(2015, 5, 12)&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Note that now the class &lt;code&gt;DateRange&lt;/code&gt; implements the standard &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/kotlin.-closed-range/index.html&quot;&gt;&lt;code&gt;ClosedRange&lt;/code&gt;&lt;/a&gt; interface and inherits &lt;code&gt;contains&lt;/code&gt; method implementation.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Range to" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234735" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/MyDate.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/MyDate.kt" />
                                <option name="text" value="data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable&lt;MyDate&gt;{&#10;    override fun compareTo(other: MyDate): Int{&#10;        if(year != other.year) return year - other.year&#10;        if(month != other.month) return month - other.month&#10;        return dayOfMonth - other.dayOfMonth&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="45" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="45" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="DateRange(this, other)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="operator fun MyDate.rangeTo(other: MyDate) = TODO()&#10;&#10;class DateRange(override val start: MyDate, override val endInclusive: MyDate): ClosedRange&lt;MyDate&gt;&#10;&#10;fun checkInRange(date: MyDate, first: MyDate, last: MyDate): Boolean {&#10;    return date in first..last&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import java.util.ArrayList&#10;import koans.util.inEquals&#10;&#10;class TestRangeTo {&#10;    fun doTest(date: MyDate, first: MyDate, last: MyDate, shouldBeInRange: Boolean) {&#10;        val message = &quot;${date} should${if (shouldBeInRange) &quot;&quot; else &quot;n't&quot;} be in range: ${first}..${last}&quot;.inEquals()&#10;        Assert.assertEquals(message, shouldBeInRange, checkInRange(date, first, last))&#10;    }&#10;&#10;    @Test fun testInRange() {&#10;        doTest(MyDate(2014, 3, 22), MyDate(2014, 1, 1), MyDate(2015, 1, 1), shouldBeInRange = true)&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691224000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;For loop&lt;/h2&gt;&#10;&lt;p&gt;Kotlin &lt;a href=&quot;http://kotlinlang.org/docs/reference/control-flow.html#for-loops&quot;&gt;for loop&lt;/a&gt; iterates through anything that provides an iterator. Make the class &lt;code&gt;DateRange&lt;/code&gt; implement &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/&quot;&gt;&lt;code&gt;Iterable&amp;lt;MyDate&amp;gt;&lt;/code&gt;&lt;/a&gt;, so that it could be iterated over. You can use the function &lt;code&gt;MyDate.nextDay()&lt;/code&gt; defined in &lt;code&gt;DateUtil.kt&lt;/code&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="For loop" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234736" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/DateUtil.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/DateUtil.kt" />
                                <option name="text" value="import java.util.Calendar&#10;&#10;fun MyDate.nextDay() = addTimeIntervals(TimeInterval.DAY, 1)&#10;&#10;enum class TimeInterval {&#10;    DAY,&#10;    WEEK,&#10;    YEAR&#10;}&#10;&#10;fun MyDate.addTimeIntervals(timeInterval: TimeInterval, number: Int): MyDate {&#10;    val c = Calendar.getInstance()&#10;    c.set(year + if (timeInterval == TimeInterval.YEAR) number else 0, month, dayOfMonth)&#10;    var timeInMillis = c.getTimeInMillis()&#10;    val millisecondsInADay = 24 * 60 * 60 * 1000L&#10;    timeInMillis += number * when (timeInterval) {&#10;        TimeInterval.DAY -&gt; millisecondsInADay&#10;        TimeInterval.WEEK -&gt; 7 * millisecondsInADay&#10;        TimeInterval.YEAR -&gt; 0L&#10;    }&#10;    val result = Calendar.getInstance()&#10;    result.setTimeInMillis(timeInMillis)&#10;    return MyDate(result.get(Calendar.YEAR), result.get(Calendar.MONTH), result.get(Calendar.DATE))&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/MyDate.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/MyDate.kt" />
                                <option name="text" value="data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable&lt;MyDate&gt;{&#10;    override fun compareTo(other: MyDate): Int{&#10;        if(year != other.year) return year - other.year&#10;        if(month != other.month) return month - other.month&#10;        return dayOfMonth - other.dayOfMonth&#10;    }&#10;}&#10;&#10;operator fun MyDate.rangeTo(other: MyDate) = DateRange(this, other)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="51" />
                                          <option name="offset" value="0" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="51" />
                                      <option name="offset" value="0" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="class DateRange(val start: MyDate, val end: MyDate)" />
                                      <option name="possibleAnswer" value="class DateRange(val start: MyDate, val end: MyDate): Iterable&lt;MyDate&gt;{&#10;    override fun iterator(): Iterator&lt;MyDate&gt; = DateIterator(this)&#10;}&#10;&#10;class DateIterator(val dateRange:DateRange) : Iterator&lt;MyDate&gt; {&#10;    var current: MyDate = dateRange.start&#10;    override fun next(): MyDate {&#10;        val result = current&#10;        current = current.nextDay()&#10;        return result&#10;    }&#10;    override fun hasNext(): Boolean = current &lt;= dateRange.end&#10;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class DateRange(val start: MyDate, val end: MyDate)&#10;&#10;fun iterateOverDateRange(firstDate: MyDate, secondDate: MyDate, handler: (MyDate) -&gt; Unit) {&#10;    for (date in firstDate..secondDate) {&#10;        handler(date)&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.inEquals&#10;&#10;class TestForLoop {&#10;    @Test fun testIterateOverDateRange() {&#10;        val actualDateRange = arrayListOf&lt;MyDate&gt;()&#10;        iterateOverDateRange(MyDate(2016, 5, 1), MyDate(2016, 5, 5), {&#10;            date-&gt; actualDateRange.add(date)&#10;        })&#10;        val expectedDateRange = arrayListOf(&#10;                MyDate(2016, 5, 1), MyDate(2016, 5, 2), MyDate(2016, 5, 3), MyDate(2016, 5, 4), MyDate(2016, 5, 5))&#10;        Assert.assertEquals(&quot;Incorrect iteration over five nice spring dates&quot;.inEquals(),&#10;                expectedDateRange, actualDateRange)&#10;    }&#10;&#10;    @Test fun testIterateOverEmptyRange() {&#10;        var invoked = false&#10;        iterateOverDateRange(MyDate(2016, 1, 1), MyDate(2015, 1, 1), { invoked = true })&#10;        Assert.assertFalse(&quot;Handler was invoked on an empty range&quot;.inEquals(), invoked)&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691225000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Operators overloading&lt;/h2&gt;&#10;&lt;p&gt;Implement a kind of date arithmetic. Support adding years, weeks and days to a date. You could be able to write the code like this: &lt;code&gt;date + YEAR * 2 + WEEK * 3 + DAY * 15&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;At first, add an extension function 'plus()' to MyDate, taking a TimeInterval as an argument. Use an utility function &lt;code&gt;MyDate.addTimeIntervals()&lt;/code&gt; declared in &lt;code&gt;DateUtil.kt&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;Then, try to support adding several time intervals to a date. You may need an extra class.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Operators overloading" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234737" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/DateUtil.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/DateUtil.kt" />
                                <option name="text" value="import java.util.Calendar&#10;&#10;fun MyDate.addTimeIntervals(timeInterval: TimeInterval, number: Int): MyDate {&#10;    val c = Calendar.getInstance()&#10;    c.set(year + if (timeInterval == TimeInterval.YEAR) number else 0, month, dayOfMonth)&#10;    var timeInMillis = c.getTimeInMillis()&#10;    val millisecondsInADay = 24 * 60 * 60 * 1000L&#10;    timeInMillis += number * when (timeInterval) {&#10;        TimeInterval.DAY -&gt; millisecondsInADay&#10;        TimeInterval.WEEK -&gt; 7 * millisecondsInADay&#10;        TimeInterval.YEAR -&gt; 0L&#10;    }&#10;    val result = Calendar.getInstance()&#10;    result.setTimeInMillis(timeInMillis)&#10;    return MyDate(result.get(Calendar.YEAR), result.get(Calendar.MONTH), result.get(Calendar.DATE))&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="69" />
                                          <option name="offset" value="139" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="69" />
                                      <option name="offset" value="139" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="operator fun MyDate.plus(timeInterval: TimeInterval): MyDate = TODO()" />
                                      <option name="possibleAnswer" value="&#10;operator fun MyDate.plus(timeInterval: TimeInterval) = addTimeIntervals(timeInterval, 1)&#10;&#10;class RepeatedTimeInterval(val timeInterval: TimeInterval, val number: Int)&#10;operator fun TimeInterval.times(number: Int) = RepeatedTimeInterval(this, number)&#10;&#10;operator fun MyDate.plus(timeIntervals: RepeatedTimeInterval) = addTimeIntervals(timeIntervals.timeInterval, timeIntervals.number)&#10;" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="64" />
                                          <option name="offset" value="318" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="64" />
                                      <option name="offset" value="318" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO(&quot;Uncomment&quot;) //return today + YEAR * 2 + WEEK * 3 + DAY * 5" />
                                      <option name="possibleAnswer" value="return today + YEAR * 2 + WEEK * 3 + DAY * 5" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import TimeInterval.*&#10;&#10;data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int)&#10;&#10;enum class TimeInterval { DAY, WEEK, YEAR }&#10;&#10;operator fun MyDate.plus(timeInterval: TimeInterval): MyDate = TODO()&#10;&#10;fun task1(today: MyDate): MyDate {&#10;    return today + YEAR + WEEK&#10;}&#10;&#10;fun task2(today: MyDate): MyDate {&#10;    TODO(&quot;Uncomment&quot;) //return today + YEAR * 2 + WEEK * 3 + DAY * 5&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessageInEquals&#10;&#10;class TestOperatorsOverloading {&#10;    @Test fun testAddOneTimeInterval() {&#10;        Assert.assertEquals(&quot;task1&quot;.toMessageInEquals(), MyDate(2015, 5, 8), task1(MyDate(2014, 5, 1)))&#10;    }&#10;&#10;    @Test fun testOneMonth() {&#10;        Assert.assertEquals(&quot;task2&quot;.toMessageInEquals(), MyDate(2016, 0, 27), task2(MyDate(2014, 0, 1)))&#10;    }&#10;&#10;    @Test fun testMonthChange() {&#10;        Assert.assertEquals(&quot;task2&quot;.toMessageInEquals(), MyDate(2016, 1, 20), task2(MyDate(2014, 0, 25)))&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691226000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Destructuring declarations&lt;/h2&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/multi-declarations.html&quot;&gt;destructuring declarations&lt;/a&gt; and make the following code compile by adding one word.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Destructuring declarations" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234738" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="0" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="0" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="data " />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="/* TODO */class MyDate(val year: Int, val month: Int, val dayOfMonth: Int)&#10;&#10;fun isLeapDay(date: MyDate): Boolean {&#10;&#10;    val (year, month, dayOfMonth) = date&#10;&#10;    // 29 February of a leap year&#10;    return year % 4 == 0 &amp;&amp; month == 2 &amp;&amp; dayOfMonth == 29&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestMultiAssignment {&#10;    @Test fun testIsLeapDay() {&#10;        Assert.assertTrue(&quot;The test failed&quot;, isLeapDay(MyDate(2016, 2, 29)))&#10;        Assert.assertFalse(&quot;The test failed&quot;, isLeapDay(MyDate(2015, 2, 29)))&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691227000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Invoke&lt;/h2&gt;&#10;&lt;p&gt;Objects with &lt;code&gt;invoke()&lt;/code&gt; method can be invoked as a function.&lt;/p&gt;&#10;&lt;p&gt;You can add &lt;code&gt;invoke&lt;/code&gt; extension for any class, but it's better not to overuse it:&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;fun Int.invoke() { println(this) }&#10;&#10;1() //huh?..&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Implement the function &lt;code&gt;Invokable.invoke()&lt;/code&gt; so it would count a number of invocations.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Invoke" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234739" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="122" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="122" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="numberOfInvocations++&#10;        return this" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class Invokable {&#10;    var numberOfInvocations: Int = 0&#10;        private set&#10;    operator fun invoke(): Invokable {&#10;        TODO()&#10;    }&#10;}&#10;&#10;fun invokeTwice(invokable: Invokable) = invokable()()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.inEquals&#10;&#10;class TestInvoke {&#10;    @Test fun testInvokeTwice() = testInvokable(2, ::invokeTwice)&#10;&#10;    private fun testInvokable(numberOfInvocations: Int, invokeSeveralTimes: (Invokable) -&gt; Invokable) {&#10;        val invokable = Invokable()&#10;        val message = &quot;The number of invocations is incorrect&quot;.inEquals()&#10;        Assert.assertEquals(message, numberOfInvocations, invokeSeveralTimes(invokable).numberOfInvocations)&#10;    }&#10;&#10;    @Test fun testNumberOfInvocations() {&#10;        testInvokable(1) { it() }&#10;        testInvokable(5) { it()()()()() }&#10;        testInvokable(0) { it }&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691228000" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="36978" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59494" />
                <option name="index" value="3" />
                <option name="name" value="Collections" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1518691243000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Introduction&lt;/h2&gt;&#10;&lt;p&gt;This part was inspired by &lt;a href=&quot;https://github.com/goldmansachs/gs-collections-kata&quot;&gt;GS Collections Kata&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;Default collections in Kotlin are Java collections, but there are lots of useful extension functions for them. For example, operations that transform a collection to another one, starting with 'to': &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/to-set.html&quot;&gt;&lt;code&gt;toSet&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/to-list.html&quot;&gt;&lt;code&gt;toList&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;Implement an extension function &lt;code&gt;Shop.getSetOfCustomers()&lt;/code&gt;. The class &lt;code&gt;Shop&lt;/code&gt; and all related classes can be found at &lt;code&gt;Shop.kt&lt;/code&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Introduction" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234740" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="46" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="46" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.toSet()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun Shop.getSetOfCustomers(): Set&lt;Customer&gt; = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestIntroduction {&#10;    @Test fun testSetOfCustomers(){&#10;        Assert.assertTrue(&quot;getSetOfCustomers&quot;.toMessage(),&#10;                shop.getSetOfCustomers() == customers.values.toSet())&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691230000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Filter; map&lt;/h2&gt;&#10;&lt;p&gt;Implement extension functions &lt;code&gt;Shop.getCitiesCustomersAreFrom()&lt;/code&gt; and &lt;code&gt;Shop.getCustomersFrom()&lt;/code&gt; using functions &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/map.html&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/filter.html&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;val numbers = listOf(1, -1, 2)&#10;numbers.filter { it &amp;gt; 0 } == listOf(1, 2)&#10;numbers.map { it * it } == listOf(1, 1, 4)&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Filter map" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234741" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="101" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="101" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.map { it.city }.toSet()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="226" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="226" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.filter { it.city == city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return the set of cities the customers are from&#10;fun Shop.getCitiesCustomersAreFrom(): Set&lt;City&gt; = TODO()&#10;&#10;// Return a list of the customers who live in the given city&#10;fun Shop.getCustomersFrom(city: City): List&lt;Customer&gt; = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestFilterMap {&#10;    @Test fun testCitiesCustomersAreFrom() {&#10;        Assert.assertTrue(&quot;getCitiesCustomersAreFrom&quot;.toMessage(),&#10;                setOf(Canberra, Vancouver, Budapest, Ankara, Tokyo) == shop.getCitiesCustomersAreFrom())&#10;    }&#10;&#10;    @Test fun testCustomersFromCity() {&#10;        Assert.assertTrue(&quot;getCustomersFrom&quot;.toMessage(),&#10;                listOf(customers[lucas], customers[cooper]) == shop.getCustomersFrom(Canberra))&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691231000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;All, Any and other predicates&lt;/h2&gt;&#10;&lt;p&gt;Implement all the functions below using &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/all.html&quot;&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/any.html&quot;&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/count.html&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/find.html&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;val numbers = listOf(-1, 0, 2)&#10;val isZero: (Int) -&amp;gt; Boolean = { it == 0 }&#10;numbers.any(isZero) == true&#10;numbers.all(isZero) == false&#10;numbers.count(isZero) == 1&#10;numbers.find { it &amp;gt; 0 } == 2&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="All Any and other predicates" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234742" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="113" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="113" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.all { it.city == city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="238" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="238" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.any { it.city == city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="347" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="347" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.count { it.city == city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="484" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="484" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.find { it.city == city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return true if all customers are from the given city&#10;fun Shop.checkAllCustomersAreFrom(city: City): Boolean = TODO()&#10;&#10;// Return true if there is at least one customer from the given city&#10;fun Shop.hasCustomerFrom(city: City): Boolean = TODO()&#10;&#10;// Return the number of customers from the given city&#10;fun Shop.countCustomersFrom(city: City): Int = TODO()&#10;&#10;// Return a customer who lives in the given city, or null if there is none&#10;fun Shop.findAnyCustomerFrom(city: City): Customer? = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestAllAnyAndOtherPredicates {&#10;&#10;    @Test fun testAllCustomersAreFromCity() {&#10;        Assert.assertFalse(&quot;checkAllCustomersAreFrom&quot;.toMessage(), shop.checkAllCustomersAreFrom(Canberra))&#10;    }&#10;&#10;    @Test fun testAnyCustomerIsFromCity() {&#10;        Assert.assertTrue(&quot;hasCustomerFrom&quot;.toMessage(), shop.hasCustomerFrom(Canberra))&#10;    }&#10;&#10;    @Test fun testCountCustomersFromCity() {&#10;        Assert.assertTrue(&quot;countCustomersFrom&quot;.toMessage(), 2 == shop.countCustomersFrom(Canberra))&#10;    }&#10;&#10;    @Test fun testAnyCustomerFromCity() {&#10;        Assert.assertTrue(&quot;findAnyCustomerFrom&quot;.toMessage(), customers[lucas] == shop.findAnyCustomerFrom(Canberra))&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691232000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;FlatMap&lt;/h2&gt;&#10;&lt;p&gt;Implement &lt;code&gt;Customer.getOrderedProducts()&lt;/code&gt; and &lt;code&gt;Shop.getAllOrderedProducts()&lt;/code&gt; using &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/flat-map.html&quot;&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;val result = listOf(&amp;quot;abc&amp;quot;, &amp;quot;12&amp;quot;).flatMap { it.toCharList() }&#10;result == listOf(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;)&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="FlatMap" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234743" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="99" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="99" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="orders.flatMap { it.products }.toSet()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="222" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="222" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.flatMap { it.getOrderedProducts() }.toSet()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return all products this customer has ordered&#10;fun Customer.getOrderedProducts(): Set&lt;Product&gt; = TODO()&#10;&#10;// Return all products that were ordered by at least one customer&#10;fun Shop.getAllOrderedProducts(): Set&lt;Product&gt; = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestFlatMap {&#10;    @Test fun testGetOrderedProductsSet() {&#10;        Assert.assertTrue(&quot;getOrderedProducts&quot;.toMessage(),&#10;                setOf(idea) == customers[reka]!!.getOrderedProducts())&#10;    }&#10;&#10;    @Test fun testGetAllOrderedProducts() {&#10;        Assert.assertTrue(&quot;getAllOrderedProducts&quot;.toMessage(),&#10;                orderedProducts == shop.getAllOrderedProducts())&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691233000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Max; min&lt;/h2&gt;&#10;&lt;p&gt;Implement &lt;code&gt;Shop.getCustomerWithMaximumNumberOfOrders()&lt;/code&gt; and &lt;code&gt;Customer.getMostExpensiveOrderedProduct()&lt;/code&gt; using &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/max.html&quot;&gt;&lt;code&gt;max&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/min.html&quot;&gt;&lt;code&gt;min&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/max-by.html&quot;&gt;&lt;code&gt;maxBy&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/min-by.html&quot;&gt;&lt;code&gt;minBy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;listOf(1, 42, 4).max() == 42&#10;listOf(&amp;quot;a&amp;quot;, &amp;quot;ab&amp;quot;).minBy { it.length } == &amp;quot;a&amp;quot;&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Max min" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234744" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="135" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="135" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.maxBy { it.orders.size }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="261" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="261" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="orders.flatMap { it.products }.maxBy { it.price }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return a customer whose order count is the highest among all customers&#10;fun Shop.getCustomerWithMaximumNumberOfOrders(): Customer? = TODO()&#10;&#10;// Return the most expensive product which has been ordered&#10;fun Customer.getMostExpensiveOrderedProduct(): Product? = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestMaxMin {&#10;    @Test fun testCustomerWithMaximumNumberOfOrders() {&#10;        Assert.assertTrue(&quot;getCustomerWithMaximumNumberOfOrders&quot;.toMessage(),&#10;                customers[reka] == shop.getCustomerWithMaximumNumberOfOrders())&#10;    }&#10;&#10;    @Test fun testTheMostExpensiveOrderedProduct() {&#10;        Assert.assertTrue(&quot;getMostExpensiveOrderedProduct&quot;.toMessage(),&#10;                rubyMine == customers[nathan]!!.getMostExpensiveOrderedProduct())&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691234000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Sort&lt;/h2&gt;&#10;&lt;p&gt;Implement &lt;code&gt;Shop.getCustomersSortedByNumberOfOrders()&lt;/code&gt; using &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/sorted.html&quot;&gt;&lt;code&gt;sorted&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/sorted-by.html&quot;&gt;&lt;code&gt;sortedBy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;listOf(&amp;quot;bbb&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;cc&amp;quot;).sorted() == listOf(&amp;quot;a&amp;quot;, &amp;quot;bbb&amp;quot;, &amp;quot;cc&amp;quot;)&#10;listOf(&amp;quot;bbb&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;cc&amp;quot;).sortedBy { it.length } == listOf(&amp;quot;a&amp;quot;, &amp;quot;cc&amp;quot;, &amp;quot;bbb&amp;quot;)&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Sort" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234745" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="146" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="146" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.sortedBy { it.orders.size }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return a list of customers, sorted by the ascending number of orders they made&#10;fun Shop.getCustomersSortedByNumberOfOrders(): List&lt;Customer&gt; = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestSort {&#10;    @Test fun testGetCustomersSortedByNumberOfOrders() {&#10;        Assert.assertTrue(&quot;getCustomersSortedByNumberOfOrders&quot;.toMessage(), sortedCustomers == shop.getCustomersSortedByNumberOfOrders())&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691235000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Sum&lt;/h2&gt;&#10;&lt;p&gt;Implement &lt;code&gt;Customer.getTotalOrderPrice()&lt;/code&gt; using &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/sum.html&quot;&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/sum-by.html&quot;&gt;&lt;code&gt;sumBy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;listOf(1, 5, 3).sum() == 9&#10;listOf(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;cc&amp;quot;).sumBy { it.length() } == 4&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;If you want to sum the double values, use &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/sum-by-double.html&quot;&gt;&lt;code&gt;sumByDouble&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Sum" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234746" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="185" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="185" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="orders.flatMap { it.products }.sumByDouble { it.price }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return the sum of prices of all products that a customer has ordered.&#10;// Note: the customer may order the same product for several times.&#10;fun Customer.getTotalOrderPrice(): Double = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestSum {&#10;    @Test fun testGetTotalOrderPrice() {&#10;        Assert.assertTrue(&quot;getTotalOrderPrice&quot;.toMessage(), customers[nathan]!!.getTotalOrderPrice() == 148.0)&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691236000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Group By&lt;/h2&gt;&#10;&lt;p&gt;Implement &lt;code&gt;Shop.groupCustomersByCity()&lt;/code&gt; using &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/group-by.html&quot;&gt;&lt;code&gt;groupBy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;val result = listOf(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;ba&amp;quot;, &amp;quot;ccc&amp;quot;, &amp;quot;ad&amp;quot;).groupBy { it.length() }&#10;result == mapOf(1 to listOf(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;), 2 to listOf(&amp;quot;ba&amp;quot;, &amp;quot;ad&amp;quot;), 3 to listOf(&amp;quot;ccc&amp;quot;))&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="GroupBy" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234747" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="114" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="114" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.groupBy { it.city }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return a map of the customers living in each city&#10;fun Shop.groupCustomersByCity(): Map&lt;City, List&lt;Customer&gt;&gt; = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestGroupBy {&#10;    @Test fun testGroupCustomersByCity() {&#10;        Assert.assertTrue(&quot;groupCustomersByCity&quot;.toMessage(),&#10;                groupedByCities == shop.groupCustomersByCity())&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691238000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Partition&lt;/h2&gt;&#10;&lt;p&gt;Implement &lt;code&gt;Shop.getCustomersWithMoreUndeliveredOrdersThanDelivered()&lt;/code&gt; using &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/partition.html&quot;&gt;&lt;code&gt;partition&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;val numbers = listOf(1, 3, -4, 2, -11)&#10;val (positive, negative) = numbers.partition { it &amp;gt; 0 }&#10;positive == listOf(1, 3, 2)&#10;negative == listOf(-4, -11)&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Note that &lt;a href=&quot;http://kotlinlang.org/docs/reference/multi-declarations.html&quot;&gt;destructuring declaration&lt;/a&gt; syntax is used in this example.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="name" value="Partition" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234748" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="147" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="147" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="customers.filter {&#10;    val (delivered, undelivered) = it.orders.partition { it.isDelivered }&#10;    undelivered.size &gt; delivered.size&#10;}.toSet()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return customers who have more undelivered orders than delivered&#10;fun Shop.getCustomersWithMoreUndeliveredOrdersThanDelivered(): Set&lt;Customer&gt; = TODO()&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestPartition {&#10;    @Test fun testGetCustomersWhoHaveMoreUndeliveredOrdersThanDelivered() {&#10;        Assert.assertTrue(&quot;getCustomerWithMaximumNumberOfOrders&quot;.toMessage(),&#10;                setOf(customers[reka]) == shop.getCustomersWithMoreUndeliveredOrdersThanDelivered())&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691239000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Fold&lt;/h2&gt;&#10;&lt;p&gt;Implement &lt;code&gt;Shop.getProductsOrderedByAllCustomers()&lt;/code&gt; using &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/fold.html&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;listOf(1, 2, 3, 4).fold(1, {&#10;    partProduct, element -&amp;gt;&#10;    element * partProduct&#10;}) == 24&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="10" />
                      <option name="name" value="Fold" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234749" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="136" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="136" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="val allProducts = customers.flatMap { it.orders.flatMap { it.products }}.toSet()&#10;    return customers.fold(allProducts, {&#10;        orderedByAll, customer -&gt;&#10;        orderedByAll.intersect(customer.orders.flatMap { it.products }.toSet())&#10;    })" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return the set of products that were ordered by every customer&#10;fun Shop.getSetOfProductsOrderedByEveryCustomer(): Set&lt;Product&gt; {&#10;    TODO()&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class TestFold {&#10;    @Test fun testGetProductsOrderedByAllCustomers() {&#10;        val testShop = shop(&quot;test shop for 'fold'&quot;,&#10;                customer(lucas, Canberra,&#10;                        order(idea),&#10;                        order(webStorm)&#10;                ),&#10;                customer(reka, Budapest,&#10;                        order(idea),&#10;                        order(youTrack)&#10;                )&#10;        )&#10;        Assert.assertTrue(&quot;getSetOfProductsOrderedByEveryCustomer&quot;.toMessage(),&#10;                setOf(idea) == testShop.getSetOfProductsOrderedByEveryCustomer())&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691240000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Compound tasks&lt;/h2&gt;&#10;&lt;p&gt;Implement &lt;code&gt;Customer.getMostExpensiveDeliveredProduct()&lt;/code&gt; and &lt;code&gt;Shop.getNumberOfTimesProductWasOrdered()&lt;/code&gt; using functions from the Kotlin standard library.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="11" />
                      <option name="name" value="Compound tasks" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234750" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="166" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="166" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="return orders.filter { it.isDelivered }.flatMap { it.products }.maxBy { it.price }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="370" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="370" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="return customers.flatMap { it.getOrderedProductsList() }.count { it == product }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="380" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="380" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="fun Customer.getOrderedProductsList(): List&lt;Product&gt; {&#10;    return orders.flatMap { it.products }&#10;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="// Return the most expensive product among all delivered products&#10;// (use the Order.isDelivered flag)&#10;fun Customer.getMostExpensiveDeliveredProduct(): Product? {&#10;    TODO()&#10;}&#10;&#10;// Return how many times the given product was ordered.&#10;// Note: a customer may order the same product for several times.&#10;fun Shop.getNumberOfTimesProductWasOrdered(product: Product): Int {&#10;    TODO()&#10;}&#10;&#10;/* TODO */&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.toMessage&#10;&#10;class K_Compound_Tasks {&#10;&#10;    @Test fun testMostExpensiveDeliveredProduct() {&#10;        val testShop = shop(&quot;test shop for 'most expensive delivered product'&quot;,&#10;                customer(lucas, Canberra,&#10;                        order(isDelivered = false, products = idea),&#10;                        order(reSharper)&#10;                )&#10;        )&#10;        Assert.assertTrue(&quot;getMostExpensiveDeliveredProduct&quot;.toMessage(), reSharper == testShop.customers[0].getMostExpensiveDeliveredProduct())&#10;    }&#10;&#10;    @Test fun testNumberOfTimesEachProductWasOrdered() {&#10;        Assert.assertTrue(&quot;getNumberOfTimesProductWasOrdered&quot;.toMessage(), 3 == shop.getNumberOfTimesProductWasOrdered(reSharper))&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691242000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Get used to new style&lt;/h2&gt;&#10;&lt;p&gt;Rewrite the following Java function to Kotlin.&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-java&quot;&gt;public Collection&amp;lt;String&amp;gt; doSomethingStrangeWithCollection(&#10;        Collection&amp;lt;String&amp;gt; collection&#10;) {&#10;    Map&amp;lt;Integer, List&amp;lt;String&amp;gt;&amp;gt; groupsByLength = Maps.newHashMap();&#10;    for (String s : collection) {&#10;        List&amp;lt;String&amp;gt; strings = groupsByLength.get(s.length());&#10;        if (strings == null) {&#10;            strings = Lists.newArrayList();&#10;            groupsByLength.put(s.length(), strings);&#10;        }&#10;        strings.add(s);&#10;    }&#10;&#10;    int maximumSizeOfGroup = 0;&#10;    for (List&amp;lt;String&amp;gt; group : groupsByLength.values()) {&#10;        if (group.size() &amp;gt; maximumSizeOfGroup) {&#10;            maximumSizeOfGroup = group.size();&#10;        }&#10;    }&#10;&#10;    for (List&amp;lt;String&amp;gt; group : groupsByLength.values()) {&#10;        if (group.size() == maximumSizeOfGroup) {&#10;            return group;&#10;        }&#10;    }&#10;    return null;&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="12" />
                      <option name="name" value="Get used to new style" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234751" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Shop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Shop.kt" />
                                <option name="text" value="data class Shop(val name: String, val customers: List&lt;Customer&gt;)&#10;&#10;data class Customer(val name: String, val city: City, val orders: List&lt;Order&gt;) {&#10;    override fun toString() = &quot;$name from ${city.name}&quot;&#10;}&#10;&#10;data class Order(val products: List&lt;Product&gt;, val isDelivered: Boolean)&#10;&#10;data class Product(val name: String, val price: Double) {&#10;    override fun toString() = &quot;'$name' for $price&quot;&#10;}&#10;&#10;data class City(val name: String) {&#10;    override fun toString() = name&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="145" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="145" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="s.length" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="221" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="221" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="group.size" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="293" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="293" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="group.size == maximumSizeOfGroup" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun doSomethingStrangeWithCollection(collection: Collection&lt;String&gt;): Collection&lt;String&gt;? {&#10;&#10;    val groupsByLength = collection. groupBy { s -&gt; TODO() }&#10;&#10;    val maximumSizeOfGroup = groupsByLength.values.map { group -&gt; TODO() }.max()&#10;&#10;    return groupsByLength.values.firstOrNull { group -&gt; TODO() }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/TestShop.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/TestShop.kt" />
                                <option name="text" value="//products&#10;val idea = Product(&quot;IntelliJ IDEA Ultimate&quot;, 199.0)&#10;val reSharper = Product(&quot;ReSharper&quot;, 149.0)&#10;val dotTrace = Product(&quot;DotTrace&quot;, 159.0)&#10;val dotMemory = Product(&quot;DotTrace&quot;, 129.0)&#10;val dotCover = Product(&quot;DotCover&quot;, 99.0)&#10;val appCode = Product(&quot;AppCode&quot;, 99.0)&#10;val phpStorm = Product(&quot;PhpStorm&quot;, 99.0)&#10;val pyCharm = Product(&quot;PyCharm&quot;, 99.0)&#10;val rubyMine = Product(&quot;RubyMine&quot;, 99.0)&#10;val webStorm = Product(&quot;WebStorm&quot;, 49.0)&#10;val teamCity = Product(&quot;TeamCity&quot;, 299.0)&#10;val youTrack = Product(&quot;YouTrack&quot;, 500.0)&#10;&#10;//customers&#10;val lucas = &quot;Lucas&quot;&#10;val cooper = &quot;Cooper&quot;&#10;val nathan = &quot;Nathan&quot;&#10;val reka = &quot;Reka&quot;&#10;val bajram = &quot;Bajram&quot;&#10;val asuka = &quot;Asuka&quot;&#10;&#10;//cities&#10;val Canberra = City(&quot;Canberra&quot;)&#10;val Vancouver = City(&quot;Vancouver&quot;)&#10;val Budapest = City(&quot;Budapest&quot;)&#10;val Ankara = City(&quot;Ankara&quot;)&#10;val Tokyo = City(&quot;Tokyo&quot;)&#10;&#10;fun customer(name: String, city: City, vararg orders: Order) = Customer(name, city, orders.toList())&#10;fun order(vararg products: Product, isDelivered: Boolean = true) = Order(products.toList(), isDelivered)&#10;fun shop(name: String, vararg customers: Customer) = Shop(name, customers.toList())&#10;&#10;val shop = shop(&quot;jb test shop&quot;,&#10;        customer(lucas, Canberra,&#10;                order(reSharper),&#10;                order(reSharper, dotMemory, dotTrace)&#10;        ),&#10;        customer(cooper, Canberra),&#10;        customer(nathan, Vancouver,&#10;                order(rubyMine, webStorm)&#10;        ),&#10;        customer(reka, Budapest,&#10;                order(idea, isDelivered = false),&#10;                order(idea, isDelivered = false),&#10;                order(idea)&#10;        ),&#10;        customer(bajram, Ankara,&#10;                order(reSharper)&#10;        ),&#10;        customer(asuka, Tokyo,&#10;                order(idea)&#10;        )&#10;)&#10;&#10;val customers: Map&lt;String, Customer&gt; = shop.customers.map { Pair(it.name, it) }.toMap()&#10;&#10;val orderedProducts = setOf(idea, reSharper, dotTrace, dotMemory, rubyMine, webStorm)&#10;&#10;val sortedCustomers = listOf(cooper, nathan, bajram, asuka, lucas, reka).map { customers[it] }&#10;&#10;val groupedByCities = mapOf(&#10;        Canberra to listOf(lucas, cooper),&#10;        Vancouver to listOf(nathan),&#10;        Budapest to listOf(reka),&#10;        Ankara to listOf(bajram),&#10;        Tokyo to listOf(asuka)&#10;).mapValues { it.value.map { name -&gt; customers[name] } }&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;import koans.util.inEquals&#10;&#10;class TestExtensionsOnCollections {&#10;    @Test fun testCollectionOfOneElement() {&#10;        doTest(listOf(&quot;a&quot;), listOf(&quot;a&quot;))&#10;    }&#10;&#10;    @Test fun testSimpleCollection() {&#10;        doTest(listOf(&quot;a&quot;, &quot;c&quot;), listOf(&quot;a&quot;, &quot;bb&quot;, &quot;c&quot;))&#10;    }&#10;&#10;    @Test fun testCollectionWithEmptyStrings() {&#10;        doTest(listOf(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;), listOf(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;a&quot;, &quot;bb&quot;, &quot;ccc&quot;, &quot;dddd&quot;))&#10;    }&#10;&#10;    @Test fun testCollectionWithTwoGroupsOfMaximalSize() {&#10;        doTest(listOf(&quot;a&quot;, &quot;c&quot;), listOf(&quot;a&quot;, &quot;bb&quot;, &quot;c&quot;, &quot;dd&quot;))&#10;    }&#10;&#10;    private fun doTest(expected: Collection&lt;String&gt;?, argument: Collection&lt;String&gt;) {&#10;        Assert.assertEquals(&quot;The function 'doSomethingStrangeWithCollection' should do at least something with a collection&quot;.inEquals(),&#10;                expected, doSomethingStrangeWithCollection(argument))&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691243000" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="36979" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59495" />
                <option name="index" value="4" />
                <option name="name" value="Properties" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1518691248000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Properties&lt;/h2&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/properties.html#properties-and-fields&quot;&gt;properties&lt;/a&gt; in Kotlin.&lt;/p&gt;&#10;&lt;p&gt;Add a custom setter to PropertyExample.propertyWithCounter so that the &lt;code&gt;counter&lt;/code&gt; property is incremented every time &lt;code&gt;propertyWithCounter&lt;/code&gt; is assigned to.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Properties" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234752" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="3" />
                                          <option name="offset" value="95" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="3" />
                                      <option name="offset" value="95" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="set" />
                                      <option name="possibleAnswer" value="set(v: Int?) {&#10;            field = v&#10;            counter++&#10;        }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class PropertyExample() {&#10;    var counter = 0&#10;    var propertyWithCounter: Int? = null&#10;        set&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestProperties {&#10;    @Test fun testPropertyWithCounter() {&#10;        val q = PropertyExample()&#10;        q.propertyWithCounter = 14&#10;        q.propertyWithCounter = 21&#10;        q.propertyWithCounter = 32&#10;        Assert.assertTrue(&quot;The property 'changeCounter' should contain the number of assignments to 'propertyWithCounter'&quot;,&#10;                3 == q.counter)&#10;        // Here we have to use !! due to false smart cast impossible&#10;        Assert.assertTrue(&quot;The property 'propertyWithCounter' should be set&quot;, 32 == q.propertyWithCounter!!)&#10;    }&#10;&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691244000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Lazy property&lt;/h2&gt;&#10;&lt;p&gt;Add a custom getter to make the 'lazy' val really lazy. It should be initialized by the invocation of 'initializer()' at the moment of the first access.&lt;/p&gt;&#10;&lt;p&gt;You can add as many additional properties as you need.&lt;/p&gt;&#10;&lt;p&gt;Do not use delegated properties!&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Lazy property" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234753" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="53" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="53" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="var value: Int? = null" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="110" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="110" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="if (value == null) {&#10;                value = initializer()&#10;            }&#10;            return value!!" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class LazyProperty(val initializer: () -&gt; Int) {&#10;    /* TODO */&#10;    val lazy: Int&#10;        get() {&#10;            TODO()&#10;        }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TetLazyProperty {&#10;    @Test fun testLazy() {&#10;        var initialized = false&#10;        val lazyProperty = LazyProperty({ initialized = true; 42 })&#10;        Assert.assertFalse(&quot;Property shouldn't be initialized before access&quot;, initialized)&#10;        val result: Int = lazyProperty.lazy&#10;        Assert.assertTrue(&quot;Property should be initialized after access&quot;, initialized)&#10;        Assert.assertEquals(42, result)&#10;    }&#10;&#10;    @Test fun initializedOnce() {&#10;        var initialized = 0&#10;        val lazyProperty = LazyProperty( { initialized++; 42 })&#10;        lazyProperty.lazy&#10;        lazyProperty.lazy&#10;        Assert.assertEquals(&quot;Lazy property should be initialized once&quot;, 1, initialized)&#10;&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691245000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Delegates example&lt;/h2&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;http://kotlinlang.org/docs/reference/delegated-properties.html&quot;&gt;delegated properties&lt;/a&gt; and make the property lazy by using delegates.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Delegates examples" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234754" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="75" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="75" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="lazy(initializer)" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="class LazyProperty(val initializer: () -&gt; Int) {&#10;    val lazyValue: Int by TODO()&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import java.util.HashMap&#10;&#10;class TestDelegatesExamples {&#10;    @Test fun testLazy() {&#10;        var initialized = false&#10;        val lazyProperty = LazyProperty({ initialized = true; 42 })&#10;        Assert.assertFalse(&quot;Property shouldn't be initialized before access&quot;, initialized)&#10;        val result: Int = lazyProperty.lazyValue&#10;        Assert.assertTrue(&quot;Property should be initialized after access&quot;, initialized)&#10;        Assert.assertEquals(42, result)&#10;    }&#10;&#10;    @Test fun initializedOnce() {&#10;        var initialized = 0&#10;        val lazyProperty = LazyProperty( { initialized++; 42 })&#10;        lazyProperty.lazyValue&#10;        lazyProperty.lazyValue&#10;        Assert.assertEquals(&quot;Lazy property should be initialized once&quot;, 1, initialized)&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691246000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Delegates&lt;/h2&gt;&#10;&lt;p&gt;You may declare your own &lt;a href=&quot;https://kotlinlang.org/docs/reference/delegated-properties.html#property-delegate-requirements&quot;&gt;delegates&lt;/a&gt;. Implement the methods of the class 'EffectiveDate' so it can be delegated to. Store only the time in milliseconds in 'timeInMillis' property.&lt;/p&gt;&#10;&lt;p&gt;Use the extension functions &lt;code&gt;MyDate.toMillis()&lt;/code&gt; and &lt;code&gt;Long.toDate()&lt;/code&gt;, defined at &lt;code&gt;MyDate.kt&lt;/code&gt;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Delegates how it works" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234755" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/MyDate.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/MyDate.kt" />
                                <option name="text" value="import java.util.Calendar&#10;&#10;data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int)&#10;&#10;fun MyDate.toMillis(): Long {&#10;    val c = Calendar.getInstance()&#10;    c.set(year, month, dayOfMonth)&#10;    return c.getTimeInMillis()&#10;}&#10;&#10;fun Long.toDate(): MyDate {&#10;    val c = Calendar.getInstance()&#10;    c.setTimeInMillis(this)&#10;    return MyDate(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DATE))&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="302" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="302" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="return timeInMillis!!.toDate()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="403" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="403" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="timeInMillis = value.toMillis()" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import kotlin.properties.ReadWriteProperty&#10;import kotlin.reflect.KProperty&#10;&#10;class D {&#10;    var date: MyDate by EffectiveDate()&#10;}&#10;&#10;class EffectiveDate&lt;R&gt; : ReadWriteProperty&lt;R, MyDate&gt; {&#10;&#10;    var timeInMillis: Long? = null&#10;&#10;    override fun getValue(thisRef: R, property: KProperty&lt;*&gt;): MyDate {&#10;        TODO()&#10;    }&#10;&#10;    override fun setValue(thisRef: R, property: KProperty&lt;*&gt;, value: MyDate) {&#10;        TODO()&#10;    }&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestDelegatesHowItWorks {&#10;    @Test fun testDate() {&#10;        val d = D()&#10;        d.date = MyDate(2014, 1, 13)&#10;        val message = &quot;The methods 'getValue' and 'setValue' are implemented incorrectly&quot;&#10;        Assert.assertTrue(message, 2014 == d.date.year)&#10;        Assert.assertTrue(message, 1 == d.date.month)&#10;        Assert.assertTrue(message, 13 == d.date.dayOfMonth)&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691248000" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="36980" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59496" />
                <option name="index" value="5" />
                <option name="name" value="Builders" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1518691254000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Extension function literals&lt;/h2&gt;&#10;&lt;p&gt;Read about &lt;a href=&quot;https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver&quot;&gt;function literals with receiver&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;You can declare &lt;code&gt;isEven&lt;/code&gt; and &lt;code&gt;isOdd&lt;/code&gt; as values, that can be called as extension functions. Complete the declarations below.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Function literals with receiver" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234756" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="66" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="66" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="this % 2 == 0" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="112" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="112" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="this % 2 != 0" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun task(): List&lt;Boolean&gt; {&#10;    val isEven: Int.() -&gt; Boolean = { TODO() }&#10;    val isOdd: Int.() -&gt; Boolean = { TODO() }&#10;&#10;    return listOf(42.isOdd(), 239.isOdd(), 294823098.isEven())&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.inEquals&#10;&#10;class TestExtensionFunctionLiterals {&#10;    @Test fun testIsOddAndIsEven() {&#10;        Assert.assertEquals(&quot;The functions 'isOdd' and 'isEven' should be implemented correctly&quot;.inEquals(),&#10;                listOf(false, true, true), task())&#10;&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691249000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;String and map builders&lt;/h2&gt;&#10;&lt;p&gt;Extension function literals are very useful for creating builders, e.g.:&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;fun buildString(build: StringBuilder.() -&amp;gt; Unit): String {&#10;    val stringBuilder = StringBuilder()&#10;    stringBuilder.build()&#10;    return stringBuilder.toString()&#10;}&#10;&#10;val s = buildString {&#10;    this.append(&amp;quot;Numbers: &amp;quot;)&#10;    for (i in 1..3) {&#10;        // &amp;#39;this&amp;#39; can be omitted&#10;        append(i)&#10;    }&#10;}&#10;&#10;s == &amp;quot;Numbers: 123&amp;quot;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Add and implement the function 'buildMap' with one parameter (of type extension function) creating a new HashMap, building it and returning it as a result. The usage of this function is shown below.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="String and map builders" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234757" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="26" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="26" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="fun &lt;K, V&gt; buildMap(build: HashMap&lt;K, V&gt;.() -&gt; Unit): Map&lt;K, V&gt; {&#10;    val map = HashMap&lt;K, V&gt;()&#10;    map.build()&#10;    return map&#10;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import java.util.HashMap&#10;&#10;/* TODO */&#10;&#10;fun usage(): Map&lt;Int, String&gt; {&#10;    return buildMap {&#10;        put(0, &quot;0&quot;)&#10;        for (i in 1..10) {&#10;            put(i, &quot;$i&quot;)&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import koans.util.inEquals&#10;&#10;class TestStringAndMapBuilders {&#10;    @Test fun testBuildMap() {&#10;        val map: Map&lt;Int, String&gt; = buildMap {&#10;            put(0, &quot;0&quot;)&#10;            for (i in 1..10) {&#10;                put(i, &quot;$i&quot;)&#10;            }&#10;        }&#10;        val expected = hashMapOf&lt;Int, String&gt;()&#10;        for (i in 0..10) {&#10;            expected[i] = &quot;$i&quot;&#10;        }&#10;        Assert.assertEquals(&quot;Map should be filled with the right values&quot;.inEquals(), expected, map)&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691250000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;The function apply&lt;/h2&gt;&#10;&lt;p&gt;The previous examples can be rewritten using the library function &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/apply.html&quot;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt; (see examples below). Write your own implementation of this function named 'myApply'.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="The function apply" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234758" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="40" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="40" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="f(); return this" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun &lt;T&gt; T.myApply(f: T.() -&gt; Unit): T { TODO() }&#10;&#10;fun createString(): String {&#10;    return StringBuilder().myApply {&#10;        append(&quot;Numbers: &quot;)&#10;        for (i in 1..10) {&#10;            append(i)&#10;        }&#10;    }.toString()&#10;}&#10;&#10;fun createMap(): Map&lt;Int, String&gt; {&#10;    return hashMapOf&lt;Int, String&gt;().myApply {&#10;        put(0, &quot;0&quot;)&#10;        for (i in 1..10) {&#10;            put(i, &quot;$i&quot;)&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import java.util.HashMap&#10;import koans.util.inEquals&#10;&#10;class TestTheFunctionWith {&#10;    @Test fun testCreateString() {&#10;        val s = createString()&#10;        val sb = StringBuilder()&#10;        sb.append(&quot;Numbers: &quot;)&#10;        for (i in 1..10) {&#10;            sb.append(i)&#10;        }&#10;        Assert.assertEquals(&quot;String should be built&quot;.inEquals(), sb.toString(), s)&#10;    }&#10;&#10;    @Test fun testCreateMap() {&#10;        val map = createMap()&#10;        val expected = HashMap&lt;Int, String&gt;()&#10;        for (i in 0..10) {&#10;            expected[i] = &quot;$i&quot;&#10;        }&#10;        Assert.assertEquals(&quot;Map should be filled with the right values&quot;.inEquals(), expected, map)&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691251000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Html builder&lt;/h2&gt;&#10;&lt;p&gt;&lt;em&gt;1.&lt;/em&gt; Fill the table with the proper values from the product list. The products are declared in &lt;code&gt;data.kt&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;&lt;em&gt;2.&lt;/em&gt; Color the table like a chess board (using getTitleColor() and getCellColor() functions above). Pass a color as an argument to the functions &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;td&lt;/code&gt;.&lt;/p&gt;&#10;&lt;p&gt;Open the file &lt;code&gt;demo.kt&lt;/code&gt; and run the main function there to see the rendered table.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Html builders" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234759" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="10" />
                                          <option name="offset" value="84" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="84" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="/* TODO */" />
                                      <option name="possibleAnswer" value="(color = getTitleColor())" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="6" />
                                          <option name="offset" value="389" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="389" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="TODO()" />
                                      <option name="possibleAnswer" value="for ((index, product) in products.withIndex()) {&#10;                tr {&#10;                    td (color = getCellColor(index, 0)) {&#10;                        text(product.description)&#10;                    }&#10;                    td (color = getCellColor(index, 1)) {&#10;                        text(product.price)&#10;                    }&#10;                    td (color = getCellColor(index, 2)) {&#10;                        text(product.popularity)&#10;                    }&#10;                }&#10;            }" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="fun renderProductTable(): String {&#10;    return html {&#10;        table {&#10;            tr /* TODO */{&#10;                td {&#10;                    text(&quot;Product&quot;)&#10;                }&#10;                td {&#10;                    text(&quot;Price&quot;)&#10;                }&#10;                td {&#10;                    text(&quot;Popularity&quot;)&#10;                }&#10;            }&#10;            val products = getProducts()&#10;            TODO()&#10;        }&#10;    }.toString()&#10;}&#10;&#10;fun getTitleColor() = &quot;#b9c9fe&quot;&#10;fun getCellColor(index: Int, row: Int) = if ((index + row) %2 == 0) &quot;#dce4ff&quot; else &quot;#eff2ff&quot;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/data.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/data.kt" />
                                <option name="text" value="data class Product(val description: String, val price: Double, val popularity: Int)&#10;&#10;val cactus = Product(&quot;cactus&quot;, 11.2, 13)&#10;val cake = Product(&quot;cake&quot;, 3.2, 111)&#10;val camera = Product(&quot;camera&quot;, 134.5, 2)&#10;val car = Product(&quot;car&quot;, 30000.0, 0)&#10;val carrot = Product(&quot;carrot&quot;, 1.34, 5)&#10;val cellPhone = Product(&quot;cell phone&quot;, 129.9, 99)&#10;val chimney = Product(&quot;chimney&quot;, 190.0, 2)&#10;val certificate = Product(&quot;certificate&quot;, 99.9, 1)&#10;val cigar = Product(&quot;cigar&quot;, 8.0, 51)&#10;val coffee = Product(&quot;coffee&quot;, 8.0, 67)&#10;val coffeeMaker = Product(&quot;coffee maker&quot;, 201.2, 1)&#10;val cola = Product(&quot;cola&quot;, 4.0, 67)&#10;val cranberry = Product(&quot;cranberry&quot;, 4.1, 39)&#10;val crocs = Product(&quot;crocs&quot;, 18.7, 10)&#10;val crocodile = Product(&quot;crocodile&quot;, 20000.2, 1)&#10;val cushion = Product(&quot;cushion&quot;, 131.0, 0)&#10;&#10;fun getProducts() = listOf(cactus, cake, camera, car, carrot, cellPhone, chimney, certificate, cigar, coffee, coffeeMaker,&#10;        cola, cranberry, crocs, crocodile, cushion)" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/demo.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/demo.kt" />
                                <option name="text" value="import javax.swing.JFrame&#10;import javax.swing.JLabel&#10;import javax.swing.JScrollPane&#10;import javax.swing.SwingConstants.CENTER&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    with (JFrame(&quot;Product popularity&quot;)) {&#10;        setSize(600, 600)&#10;        defaultCloseOperation = JFrame.EXIT_ON_CLOSE&#10;        add(JScrollPane(JLabel(renderProductTable(), CENTER)))&#10;        isVisible = true&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/html.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/html.kt" />
                                <option name="text" value="import java.util.ArrayList&#10;&#10;open class Tag(val name: String) {&#10;    val children: MutableList&lt;Tag&gt; = ArrayList()&#10;    val attributes: MutableList&lt;Attribute&gt; = ArrayList()&#10;&#10;    override fun toString(): String {&#10;        return &quot;&lt;$name&quot; +&#10;            (if (attributes.isEmpty()) &quot;&quot; else attributes.joinToString(separator = &quot;&quot;, prefix = &quot; &quot;)) + &quot;&gt;&quot; +&#10;            (if (children.isEmpty()) &quot;&quot; else children.joinToString(separator = &quot;&quot;)) +&#10;            &quot;&lt;/$name&gt;&quot;&#10;    }&#10;}&#10;&#10;class Attribute(val name : String, val value : String) {&#10;    override fun toString() = &quot;&quot;&quot;$name=&quot;$value&quot; &quot;&quot;&quot;&#10;}&#10;&#10;fun &lt;T: Tag&gt; T.set(name: String, value: String?): T {&#10;    if (value != null) {&#10;        attributes.add(Attribute(name, value))&#10;    }&#10;    return this&#10;}&#10;&#10;fun &lt;T: Tag&gt; Tag.doInit(tag: T, init: T.() -&gt; Unit): T {&#10;    tag.init()&#10;    children.add(tag)&#10;    return tag&#10;}&#10;&#10;class Html: Tag(&quot;html&quot;)&#10;class Table: Tag(&quot;table&quot;)&#10;class Center: Tag(&quot;center&quot;)&#10;class TR: Tag(&quot;tr&quot;)&#10;class TD: Tag(&quot;td&quot;)&#10;class Text(val text: String): Tag(&quot;b&quot;) {&#10;    override fun toString() = text&#10;}&#10;&#10;fun html(init: Html.() -&gt; Unit): Html = Html().apply(init)&#10;&#10;fun Html.table(init : Table.() -&gt; Unit) = doInit(Table(), init)&#10;fun Html.center(init : Center.() -&gt; Unit) = doInit(Center(), init)&#10;&#10;fun Table.tr(color: String? = null, init : TR.() -&gt; Unit) = doInit(TR(), init).set(&quot;bgcolor&quot;, color)&#10;&#10;fun TR.td(color: String? = null, align : String = &quot;left&quot;, init : TD.() -&gt; Unit) = doInit(TD(), init).set(&quot;align&quot;, align).set(&quot;bgcolor&quot;, color)&#10;&#10;fun Tag.text(s : Any?) = doInit(Text(s.toString()), {})&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class TestHtmlBuilders {&#10;    @Test fun productTableIsFilled() {&#10;        val result = renderProductTable()&#10;        Assert.assertTrue(&quot;Product table should contain the corresponding data&quot;, result.contains(&quot;cactus&quot;))&#10;    }&#10;&#10;    @Test fun productTableIsColored() {&#10;        val result = renderProductTable()&#10;        Assert.assertTrue(&quot;Product table should be colored&quot;, result.contains(&quot;bgcolor&quot;))&#10;    }&#10;}&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691252000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Builders: how it works&lt;/h2&gt;&#10;&lt;p&gt;Look at the questions below and give your answers&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;1. In the Kotlin code&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;tr {&#10;    td {&#10;        text(&amp;quot;Product&amp;quot;)&#10;    }&#10;    td {&#10;        text(&amp;quot;Popularity&amp;quot;)&#10;    }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;'td' is:&lt;/strong&gt;&lt;/p&gt;&#10;&lt;p&gt;a. special built-in syntactic construct&lt;/p&gt;&#10;&lt;p&gt;b. function declaration&lt;/p&gt;&#10;&lt;p&gt;c. function invocation&lt;/p&gt;&#10;&lt;hr/&gt;&#10;&lt;p&gt;&lt;strong&gt;2. In the Kotlin code&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;tr (color = &amp;quot;yellow&amp;quot;) {&#10;    td {&#10;        text(&amp;quot;Product&amp;quot;)&#10;    }&#10;    td {&#10;        text(&amp;quot;Popularity&amp;quot;)&#10;    }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;'color' is:&lt;/strong&gt;&lt;/p&gt;&#10;&lt;p&gt;a. new variable declaration&lt;/p&gt;&#10;&lt;p&gt;b. argument name&lt;/p&gt;&#10;&lt;p&gt;c. argument value&lt;/p&gt;&#10;&lt;hr/&gt;&#10;&lt;p&gt;&lt;strong&gt;3. The block&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;{&#10;    text(&amp;quot;Product&amp;quot;)&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;from the previous question is:&lt;/strong&gt;&lt;/p&gt;&#10;&lt;p&gt;a. block inside built-in syntax construction &lt;code&gt;td&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;b. function literal (or &quot;lambda&quot;)&lt;/p&gt;&#10;&lt;p&gt;c. something mysterious&lt;/p&gt;&#10;&lt;hr/&gt;&#10;&lt;p&gt;&lt;strong&gt;4. For the code&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;tr (color = &amp;quot;yellow&amp;quot;) {&#10;    this.td {&#10;        text(&amp;quot;Product&amp;quot;)&#10;    }&#10;    td {&#10;        text(&amp;quot;Popularity&amp;quot;)&#10;    }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;strong&gt;which of the following is true:&lt;/strong&gt;&lt;/p&gt;&#10;&lt;p&gt;a. this code doesn't compile&lt;/p&gt;&#10;&lt;p&gt;b. &lt;code&gt;this&lt;/code&gt; refers to an instance of an outer class&lt;/p&gt;&#10;&lt;p&gt;c. &lt;code&gt;this&lt;/code&gt; refers to a receiver parameter TR of the function literal:&lt;/p&gt;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;tr (color = &amp;quot;yellow&amp;quot;) { TR.(): Unit -&amp;gt;&#10;      this.td {&#10;          text(&amp;quot;Product&amp;quot;)&#10;      }&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Builders how it works" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234760" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="42" />
                                          <option name="offset" value="91" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="42" />
                                      <option name="offset" value="91" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="1 to null, 2 to null, 3 to null, 4 to null" />
                                      <option name="possibleAnswer" value="1 to c, 2 to b, 3 to b, 4 to c" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import Answer.*&#10;&#10;enum class Answer { a, b, c }&#10;&#10;val answers = mapOf&lt;Int, Answer?&gt;(&#10;        1 to null, 2 to null, 3 to null, 4 to null&#10;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Test&#10;import org.junit.Assert&#10;import Answer.*&#10;&#10;class TestBuildersHowItWorks {&#10;    @Test fun testBuildersQuiz() {&#10;        if (answers.values.toSet() == setOf(null)) {&#10;            Assert.fail(&quot;Please specify your answers!&quot;)&#10;        }&#10;        val correctAnswers = mapOf(22 - 20 to b, 1 + 3 to c, 11 - 8 to b, 79 - 78 to c)&#10;        if (correctAnswers != answers) {&#10;            val incorrect = (1..4).filter { answers[it] != correctAnswers[it] }&#10;            Assert.fail(&quot;Your answers are incorrect! $incorrect&quot;)&#10;        }&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691254000" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="36981" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="59497" />
                <option name="index" value="6" />
                <option name="name" value="Generics" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1518691255000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Generic functions&lt;/h2&gt;&#10;&lt;p&gt;Make the following code compile by implementing a &lt;code&gt;partitionTo&lt;/code&gt; function that splits a collection into two collections according to the predicate.&lt;/p&gt;&#10;&lt;p&gt;There is a &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/partition.html&quot;&gt;&lt;code&gt;partition()&lt;/code&gt;&lt;/a&gt; function in the standard library that always returns two newly created lists. You should write a function that splits the collection into two collections given as arguments. The signature of the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/to-collection.html&quot;&gt;&lt;code&gt;toCollection()&lt;/code&gt;&lt;/a&gt;  function from the standard library may help you.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Generic functions" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="234761" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="src/Task.kt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list>
                                          <option value="" />
                                        </list>
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState">
                                        <MyInitialState>
                                          <option name="length" value="26" />
                                          <option name="offset" value="20" />
                                        </MyInitialState>
                                      </option>
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="26" />
                                      <option name="offset" value="20" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="fun partitionTo() = TODO()" />
                                      <option name="possibleAnswer" value="fun &lt;T, C: MutableCollection&lt;T&gt;&gt; Collection&lt;T&gt;.partitionTo(first: C, second: C, predicate: (T) -&gt; Boolean): Pair&lt;C, C&gt; {&#10;    for (element in this) {&#10;        if (predicate(element)) {&#10;            first.add(element)&#10;        } else {&#10;            second.add(element)&#10;        }&#10;    }&#10;    return Pair(first, second)&#10;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" value="Unchecked" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="true" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Task.kt" />
                                <option name="text" value="import java.util.*&#10;&#10;fun partitionTo() = TODO()&#10;&#10;fun partitionWordsAndLines() {&#10;    val (words, lines) = listOf(&quot;a&quot;, &quot;a b&quot;, &quot;c&quot;, &quot;d e&quot;).&#10;            partitionTo(ArrayList&lt;String&gt;(), ArrayList()) { s -&gt; !s.contains(&quot; &quot;) }&#10;    words == listOf(&quot;a&quot;, &quot;c&quot;)&#10;    lines == listOf(&quot;a b&quot;, &quot;d e&quot;)&#10;}&#10;&#10;fun partitionLettersAndOtherSymbols() {&#10;    val (letters, other) = setOf('a', '%', 'r', '}').&#10;            partitionTo(HashSet&lt;Char&gt;(), HashSet()) { c -&gt; c in 'a'..'z' || c in 'A'..'Z'}&#10;    letters == setOf('a', 'r')&#10;    other == setOf('%', '}')&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="test/tests.kt" value="import org.junit.Assert&#10;import org.junit.Test&#10;import java.util.*&#10;import koans.util.toMessageInEquals&#10;&#10;class TestGenericFunctions {&#10;    @Test fun testPartitionWordsAndLines() {&#10;        partitionWordsAndLines()&#10;&#10;        val (words, lines) = listOf(&quot;a&quot;, &quot;a b&quot;, &quot;c&quot;, &quot;d e&quot;).&#10;                partitionTo(ArrayList&lt;String&gt;(), ArrayList()) { s -&gt; !s.contains(&quot; &quot;) }&#10;        Assert.assertEquals(&quot;partitionTo&quot;.toMessageInEquals(), listOf(&quot;a&quot;, &quot;c&quot;), words)&#10;        Assert.assertEquals(&quot;partitionTo&quot;.toMessageInEquals(), listOf(&quot;a b&quot;, &quot;d e&quot;), lines)&#10;    }&#10;&#10;    @Test fun testPartitionLettersAndOtherSymbols() {&#10;        partitionLettersAndOtherSymbols()&#10;&#10;        val (letters, other) = setOf('a', '%', 'r', '}').&#10;                partitionTo(HashSet&lt;Char&gt;(), HashSet()) { c -&gt; c in 'a'..'z' || c in 'A'..'Z'}&#10;        Assert.assertEquals(&quot;partitionTo&quot;.toMessageInEquals(), setOf('a', 'r'), letters)&#10;        Assert.assertEquals(&quot;partitionTo&quot;.toMessageInEquals(), setOf('%', '}'), other)&#10;    }&#10;}" />
                        </map>
                      </option>
                      <option name="updateDate" value="1518691255000" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="36982" />
              </Lesson>
            </list>
          </option>
        </RemoteCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>
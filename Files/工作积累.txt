1、
刷机工具存放的位置（上海）


邮箱密码改为：
Wheatek#


：
\\192.168.1.12\SW&SWT_file_exchange\wushanfei

另外
patch可以保存到该ftp：18.8.3.102 用户名：allbackups 密码：1q2w3e4r5t@ms


2、
git clone ssh://yuchong.li@192.168.80.2:29418/WTK6739_P0_MP1_AP

git clone ssh://yuchong.li@192.168.80.2:29418/WTK6580_O1_AP




\\192.168.1.13\Project_HDC\WTK6739_P0\E966_CQ_9071C_71_P0\E966_CQ_9071C_71_P0_V1.2.1_S190820


3、戴智毅MTK账号密码:
Account(Email): zhiyi.dai@wheatek.com
Login Password: Dyc3u+ehzQ0uPc


zhijian.liu@wheatek.com
sz2019


账号：yin.chang1@wheatek.com
密码：aA1234a!!




4130694002
-----------------------------------------------------------------------------------------------

/***********************************************************
* History:
* 1. yuchong.li@wheatek.com BUG_ID:E937_YJSQ-3991 20190522
* Description: Screen pinning, navigation buttons layout in confirm window is not adapt to the true layout of the system
***********************************************************/
[E9592_BQ_63_P0][EJWJE-331]change translation of qs tile
[E557_OQ_S65_UZ_61_P0][EWWQ-2250]change translation
[E959_OQ_S70_UZ_63_P0][EJWJ-1360]fix bug: dialog showing so short time after change user to guest
[E965_CQ_9071C-1_63_P0][EJLW-48][EJLW-50][EJLW-69][EJLW-82][EJLW-83][EJLW-86] add adups fota and faceunlock
[E531_DG_M9T_EEA][EWSY-1544] fixbug: NoSuchElementException crash in systemui
[E9361_ALLVIEW_39_P0][EJSLY-705][EJSLY-712][EJSLY-713]modify some string translation as custom required
[E838_TG_T19_RUSSIA][YIOY-645][YIOY-649][YIOY-651][YIOY-652][YIOY-658][YIOY-674]fix bug: change translations of Russian and modify GlobaleActionDialog layout in ru

[TE536_BLU_39_P0][TEWSL-399]fixbug：longscreenshot result is not good in some pages
[E9592_BLU_63_P0][EJWJE-923]modify chooselockpassword  design, must contain at least 1 letter

[C719_8045_39_O1][CQYJ-1809] update adups ota version to 5.26

[E977_DG_M11_71_P0_EEA][EJQQ-1493]fix bug: dialog showing so short time after change user to guest
[E977_PUBLIC_71_Q0][EJQQ-1552]add am pm mark in keyguard slice view of alarm

[E557_OQ_S65_PL_61_P0][EWWQ-2193] change adups fota pl translation 

[E977_PUBLIC_71_Q0][EJQQ-1855]fix bug : in guestural mode, navigation bar back button is not work

[E9592_BQ_63_P0][EJWJE-901]fix bug: device runs not fluent while screenrecorder running in gesture navigation mode

[E9361_COPPEL_39_Q0_GO][EJSLYQ-65]modify emergency button visibility in bouncer


[E977_DG_M13_71_Q0][EJQQQ-524]fix bug : the system language turn to default after switch users between owner and guest twice with simcard plugged before change any language in setting

[E535_DG_M9T_39_P0_RUSSIA][YWSW-1837]fix bug: modify status bar icon color of clear memory page to dark


[TE585_DG_1910S_37_Q0_GO][TEWBW-824]fix bug:brightness dialog surrounded by grey translucent circles in dark theme mode


[E9361_COPPEL_39_Q0_GO][EJSLYQ-124]fix bug: volume icons' size and color different from others in statusbar

//modified for BUG_ID:YJSQ-4688 by yuchong.li@wheatek.com 20190830 begin

//add for BUG_ID:EJSLY-471 by yuchong.li@wheatek.com 20190916 begin
[E535_DK_DK008Q_39_Q0][EWSWQ-50]add feature : modify notification sort required by client

[E531_JK_DK008_80_O1][EWSY-1546]fix bug: dialog showing so short time after change user to guest
git config --global user.email "yuchong.li@wheatek.com"

git config --global user.name "liyuchong"

[X511Q_CQ_7081C1_80_GO_Q0][XWYYQ-342]fix bug: music name shown a short time in keyguardsliceview if close and open screen so quick while playing music
-----------------------------------------------------------------------------------------------------------------------------------------------------

【问题原因】
 
【解决方案】
 
【验证方法与步骤】

【影响的功能与模块】
-----------------------------------------------------------------------------------------------------------------------------------------------------
//modified for FEATRUE:switch_screen_between_notch_and_square by yuchong.li@wheatek.com 20190606 begin


【1703BC】【MR】【Checklist】更新SDK至26或更高版本，Package [com.cydroid.note]
[1703_BC_MR][YQLS-104]fix bug: change sdk version of Package [com.cydroid.note] to 26


-----------------------------------------------------------------------------------------------------------------------------------------------------
* Android P + kernel-4.4 or kernel-3.18
- download preloader with verified boot disabled which location is the same as scatter file //preloader_<PROJECT>_SBOOT_DIS.bin
- adb root
- adb disable-verity
- adb reboot
- adb root
- adb remount

* Android P + kernel-4.9 or after 
- download preloader with verified boot disabled which location is the same as scatter file. //preloader_<PROJECT>_SBOOT_DIS.bin
- boot to Home Screen
- go to setting -> system -> Developer options -> OEM unlocking
- adb reboot bootloader
- fastboot flashing unlock
- press volume up key
- fastboot reboot
- adb root
- adb disable-verity
- adb reboot
- adb root
- adb remount

-----------------------------------------------------------------------------------------------------------------------------------------------------

请大家注意，后续凡是chenyee老项目，用到chenyee账号登录e-service，pms等的，cc list 务必不要写麦穗邮箱（空白），finder email 也务必不要留麦穗邮箱，统一用你登录的账号邮箱即可（即ddongleo@chenyee.com）

-----------------------------------------------------------------------------------------------------------------------------------------------------
公司邮箱90天需要更改一次密码，过期前可以通过https://mail.wheatek.com/owa 修改，过期后联系上海IT 郝军鹏更改。

WIFI 名称：Wheatek-SZ 密码：Szwifi2019!先设置一下邮箱，outlook，公司邮箱惯例是——名.姓@wheatek.com
公司默认邮箱密码（不要更改）：Wheatek!
顺丰月结账号：7550116997

-----------------------------------------------------------------------------------------------------------------------------------------------------
repo init -u ssh://liyuchong@18.8.3.13:29418/mtk/manifest -b cy_o1.mp1 -m cy_o1.mp1_CSW1703BA_T1295_SMR.xml

 repo init -u ssh://liyuchong@18.8.3.13:29418/151/manifest -b chenyee_rom_apk -m CSW1703_oversea_mp.xml

-----------------------------------------------------------------------------------------------------------------------------------------------------
用了快霸的项目：
dev_a798_cq_8121_gms
dev_e838_tg_t19
dev_e937_cq_9013l
dev_e937_dg_gms
dev_e937_tg_t18
develop_mp7
-----------------------------------------------------------------------------------------------------------------------------------------------------

com.android.internal.R.bool.config_use_oq_statusBarIcons
这种资源在alps\frameworks\base\core\res\res\values\config.xml 中

-----------------------------------------------------------------------------------------------------------------------------------------------------
"CY_REPO_ALPS=""repo init -u ssh://gerritbuild@18.8.3.13:29418/P/manifest -b cy_p0.mp1 -m cy_p0.mp1.xml""
CY_REPO_ROM=""repo init -u ssh://gerritbuild@18.8.3.13:29418/P/manifest -b chenyee_rom_apk -m CSW1703_master.xml""
"


repo init -u ssh://liyuchong@18.8.3.13:29418/P/manifest -b cy_p0.mp1 -m cy_p0.mp1.xml

repo init -u ssh://liyuchong@18.8.3.13:29418/P/manifest -b chenyee_rom_apk -m CSW1703_master.xml

-----------------------------------------------------------------------------------------------------------------------------------------------------
指令adb shell pm path <package_name>，可以看到手机中package_name对应apk的名称
find -name "*.mk" |xargs grep -r "<apkname>" 可以快速查出apk所在目录
adb shell pm dump <package_name> | findstr version 可以查手机中各个package的sdk版本

-----------------------------------------------------------------------------------------------------------------------------------------------------

activityManager.getRunningTasks(1).get(0).topActivity.getPackageName()

-----------------------------------------------------------------------------------------------------------------------------------------------------

adb logcat -G 20M

-----------------------------------------------------------------------------------------------------------------------------------------------------

各个项目分区大小：
alps\device\maisui\e535_dk_dk008p_39_p0\partition_size.mk

比如：
BOARD_SYSTEMIMAGE_PARTITION_SIZE:=838860800                               838M？
BOARD_CACHEIMAGE_PARTITION_SIZE:=134217728                                134M?
BOARD_USERDATAIMAGE_PARTITION_SIZE:=1240465408                            1.2G?

各个项目分区挂载的名称等配置：
Z:\code\p\6739\WTK6739_P0_MP1_AP\alps\device\maisui\e838_tg_t19_39_p0\recovery.fstab

而这些文件是在BoardConfig.xml中被引用的。

-----------------------------------------------------------------------------------------------------------------------------------------------------

out/target/product/e966_cq_9071_71_p0/obj/PTGEN/partition_size.mk 分区大小？？？？
-----------------------------------------------------------------------------------------------------------------------------------------------------
本地调试SystemUI，
要用eng版本，本地编译SystemUI的apk后push到手机里
并且要重启手机或者重新启动SystemUI进程。
重启SystemUI进程的命令：
adb shell ps | grep systemui | awk '{print $2}' | xargs adb shell kill -9

------------------------------------------------------------------------------------------------------------------------------------------------------
获取屏幕信息：
        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);

       float density  = dm.density;      // 屏幕密度（像素比例：0.75/1.0/1.5/2.0）
        float densityDPI = dm.densityDpi;     // 屏幕密度（每寸像素：120/160/240/320）
        float xdpi = dm.xdpi;
        float ydpi = dm.ydpi;

        Log.e(TAG + "  DisplayMetrics", "xdpi=" + xdpi + "; ydpi=" + ydpi);
        Log.e(TAG + "  DisplayMetrics", "density=" + density + "; densityDPI=" + densityDPI);

        int screenWidthDip = dm.widthPixels;        // 屏幕宽（dip，如：320dip）
        int screenHeightDip = dm.heightPixels;      // 屏幕宽（dip，如：533dip）

        Log.e(TAG + "  DisplayMetrics(222)", "screenWidthDip=" + screenWidthDip + "; screenHeightDip=" + screenHeightDip);

        int screenWidth  = (int)(dm.widthPixels * density + 0.5f);      // 屏幕宽（px，如：480px）
       int screenHeight = (int)(dm.heightPixels * density + 0.5f);     // 屏幕高（px，如：800px）
------------------------------------------------------------------------------------------------------------------------------------------------------

linux 生成某文件的md5值：
md5sum <file>

------------------------------------------------------------------------------------------------------------------------------------------------------
ota:


    protected static boolean isEmmcSupport() {
        boolean ret = false;

        ret = SystemProperties.get("ro.vendor.mtk_emmc_support").equals("1");

        Log.d(TAG, "isEmmcSupport: " + ret);

        return ret;
    }
	
------------------------------------------------------------------------------------------------------------------------------------------------------

如何抓第一次开机mtklog

适用平台：MTK所有平台
user版本mtklog默认关闭，在某些场景下，比如第一次开机某些应用报错，需要抓取第一次开机的mtklog

如何修改
1.连接USB，在Settings->Developer Options中勾选USB debug
2.在工程模式中root手机（如果无法root请找开发编译eng boot）
3.将手机/system/etc下的mtklog配置文件mtklog-config.prop从手机中导出来
命令如下：
adb pull /system/etc/mtklog-config.prop


将com.mediatek.log.mobile.enabled等值修改为true

注意：Android N的路径是/system/vendor/etc/mtklog-config.prop


修改前：
mtklog_path = internal_sd
com.mediatek.log.mobile.enabled = false
com.mediatek.log.mobile.maxsize = 300
com.mediatek.log.modem.enabled = false
com.mediatek.log.modem.maxsize = 600
com.mediatek.log.net.enabled = false
com.mediatek.log.net.maxsize = 200


修改后：
mtklog_path = internal_sd
com.mediatek.log.mobile.enabled = true
com.mediatek.log.mobile.maxsize = 300
com.mediatek.log.modem.enabled = true
com.mediatek.log.modem.maxsize = 600
com.mediatek.log.net.enabled = true
com.mediatek.log.net.maxsize = 200

4.将修改后的mtklog-config.prop导入手机，命令如下：

adb remount

adb push  mtklog-config.prop /system/etc/


5.恢复出厂设置，mtklog就默认打开了
------------------------------------------------------------------------------------------------------------------------------------------------------
Log.isLoggabled正确的使用姿势

相信很多同事在阅读源码的时候会经常看到Log的debug开关是用Log.isLoggable(TAG,xxxx)来控制的，通常我的做法是 DEBUG = true，然后编译模块重新验证。虽然这样做可以解决大部分模块的Log打印问题，但是一些framework层就得需要eng版本了，这样严重影响了工作效率，那有没有什么方便的方法呢？经过查资料终于搞懂了Log.isLoggable的正确用法，大大提高了工作效率。下面就来简单介绍一下。

请看下面例子

public class MainActivity extends Activity implements OnClickListener {

    //各个Log级别定义的值，级别越高值越大
    /* public static final int VERBOSE = 2; 
 public static final int DEBUG = 3; 
 public static final int INFO = 4; 
 public static final int WARN = 5; 
 public static final int ERROR = 6; 
 public static final int ASSERT = 7; */

    private static final String TAG = "Hello";
    //定义全局的Log开关
    private boolean VERBOSE = Log.isLoggable(TAG, Log.VERBOSE);
    private boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);
    private boolean INFO = Log.isLoggable(TAG, Log.INFO);
    private boolean WARN = Log.isLoggable(TAG, Log.WARN);
    private boolean ERROR = Log.isLoggable(TAG, Log.ERROR);
    private boolean ASSERT = Log.isLoggable(TAG, Log.ASSERT);
    private boolean SUPPRESS = Log.isLoggable(TAG, -1);

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        findViewById(R.id.id_verbose).setOnClickListener(this);
    }

    /** * 更新loggable值 */
    private void update() {
        //局部的Log开关
        VERBOSE = Log.isLoggable(TAG, Log.VERBOSE);
        DEBUG = Log.isLoggable(TAG, Log.DEBUG);
        INFO = Log.isLoggable(TAG, Log.INFO);
        WARN = Log.isLoggable(TAG, Log.WARN);
        ERROR = Log.isLoggable(TAG, Log.ERROR);
        ASSERT = Log.isLoggable(TAG, Log.ASSERT);
        SUPPRESS = Log.isLoggable(TAG, -1);
    }

    @Override
    public void onClick(View v) {
        update();

        switch (v.getId()) {
        case R.id.id_verbose:
            Log.d(TAG, "------------------start------------------------");
            if (VERBOSE) {
                Log.d(TAG, "verbose log");
            }
            if (DEBUG) {
                Log.d(TAG, "debug log");
            }
            if (INFO) {
                Log.d(TAG, "info log");
            }
            if (WARN) {
                Log.d(TAG, "warn log");
            }
            if (ERROR) {
                Log.d(TAG, "error log");
            }
            if (ASSERT) {
                Log.d(TAG, "assert log");
            }
            if (SUPPRESS) {
                Log.d(TAG, "suppress log");
            }
            Log.d(TAG, "------------------end------------------------");
            break;

        default:
            break;
        }
    }
}
上面的代码我们已经将所有的Log开关都定义了，并设置了相应的打印信息。下面我们来看下其相关的打印日志。 
1.没有做任何操作时的Log，默认级别是INFO

06-05 13:37:06.436: D/Hello(2651): ------------------start------------------------
06-05 13:37:06.436: D/Hello(2651): info log
06-05 13:37:06.436: D/Hello(2651): warn log
06-05 13:37:06.436: D/Hello(2651): error log
06-05 13:37:06.436: D/Hello(2651): assert log
06-05 13:37:06.436: D/Hello(2651): ------------------end------------------------
2.设置adb shell setprop log.tag.Hello V

06-05 13:38:49.102: D/Hello(2651): ------------------start------------------------

06-05 13:38:49.102: D/Hello(2651): verbose log
06-05 13:38:49.102: D/Hello(2651): debug log
06-05 13:38:49.102: D/Hello(2651): info log
06-05 13:38:49.102: D/Hello(2651): warn log
06-05 13:38:49.102: D/Hello(2651): error log
06-05 13:38:49.102: D/Hello(2651): assert log
06-05 13:38:49.103: D/Hello(2651): ------------------end------------------------
3.设置adb shell setprop log.tag.Hello D

06-05 13:39:42.593: D/Hello(2651): ------------------start------------------------
06-05 13:39:42.593: D/Hello(2651): debug log
06-05 13:39:42.593: D/Hello(2651): info log
06-05 13:39:42.593: D/Hello(2651): warn log
06-05 13:39:42.593: D/Hello(2651): error log
06-05 13:39:42.593: D/Hello(2651): assert log
06-05 13:39:42.593: D/Hello(2651): ------------------end------------------------
4.设置adb shell setprop log.tag.Hello I

06-05 13:40:21.949: D/Hello(2651): ------------------start------------------------
06-05 13:40:21.949: D/Hello(2651): info log
06-05 13:40:21.949: D/Hello(2651): warn log
06-05 13:40:21.949: D/Hello(2651): error log
06-05 13:40:21.949: D/Hello(2651): assert log
06-05 13:40:21.949: D/Hello(2651): ------------------end------------------------
5.设置adb shell setprop log.tag.Hello W

06-05 13:41:26.370: D/Hello(2651): ------------------start------------------------
06-05 13:41:26.370: D/Hello(2651): warn log
06-05 13:41:26.370: D/Hello(2651): error log
06-05 13:41:26.370: D/Hello(2651): assert log
06-05 13:41:26.370: D/Hello(2651): ------------------end------------------------
6.设置adb shell setprop log.tag.Hello E

06-05 13:41:58.954: D/Hello(2651): ------------------start------------------------
06-05 13:41:58.954: D/Hello(2651): error log
06-05 13:41:58.954: D/Hello(2651): assert log
06-05 13:41:58.954: D/Hello(2651): ------------------end------------------------
7.设置adb shell setprop log.tag.Hello A

06-05 13:42:56.747: D/Hello(2651): ------------------start------------------------
06-05 13:42:56.748: D/Hello(2651): assert log
06-05 13:42:56.748: D/Hello(2651): ------------------end------------------------
8.设置adb shell setprop log.tag.Hello S

06-05 13:43:46.563: D/Hello(2651): ------------------start------------------------
06-05 13:43:46.563: D/Hello(2651): ------------------end------------------------
通过上面的Log信息可以分析到，我们通过adb shell setprop设置相应的级别和代码中Log.isLoggable设置的级别比较，当Log.isLoggable设置的级别大于或等于setprop设置的级别时，Log开关即打开，就可以打印Log了。同时，我们设置的S级别的Log，怎么样都不会打印Log。我们没有setprop任何Log级别时，默认打印的是设置Info级别的Log，从这里我们也可以知道，在实际代码Log开关定义中，最好设置成DEBUG级别，这样就可以通过setprop来设置是否需要打印Log。

 

frameworks中的模块使用Log.isLoggable
当APP使用Log.isLoggable并定义为全局变量时，我们可以setprop后重启app打印相关的Log。那frameworks中如果有Log.isLoggable要怎么打印呢？只需要执行下面3步即可：

adb shell setprop log.tag.<TAG> D
adb shell stop
adb shell start
adb shell stop会杀掉zygote进程以及所有由zygote孵化而来的子进程。adb shell start则会重启zygote进程，再由zygote进程启动其它android核心进程。当zygote重新启动时，会重新加载framework相关资源，而此时属性已经设置。

通过上面的实战分析，我们在做Log开关的时候，采用Log.isLoggable的方式，最好使用DEBUG级别这样我们就可以控制Log的打印了。同时,需要注意的是setprop设置Log级别的方法是一次性的，即如果机器重启后，就不会生效了。如果要想永久生效，就可以把属性值写入 /data/local.prop文件中，本文就不细讲了。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
服务器上找到对应的版本，解压缩出里面的system.img。然后把这个img挂载成一个目录（比如：mnt_dir）就可以看到里面的内容了。
挂载用到下面三个命令：
simg2img system.img system.img.ext4 //将system.img转换成system.img.ext4
mkdir mnt_dir
sudo mount -t ext4 -o loop system.img.ext4 mnt_dir //挂载
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ro.sf.lcd_density

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


adb pull /sdcard/debuglogger







